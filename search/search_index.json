{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 If you want to learn how to interact with the Tesserae API, you've come to the right place. The information presented here includes the promises we make about what you can expect from us, dependent on what we expect from you (\"specifications\", they say). We'll also present examples to help set expectations. About Us \u00b6 TODO: link Tesserae project Who are \"we\"? We are digital humanists, associated with the Tesserae project. We are interested in intertextual relationships, and we use computational methods to aid us in this quest.","title":"Home"},{"location":"#introduction","text":"If you want to learn how to interact with the Tesserae API, you've come to the right place. The information presented here includes the promises we make about what you can expect from us, dependent on what we expect from you (\"specifications\", they say). We'll also present examples to help set expectations.","title":"Introduction"},{"location":"#about-us","text":"TODO: link Tesserae project Who are \"we\"? We are digital humanists, associated with the Tesserae project. We are interested in intertextual relationships, and we use computational methods to aid us in this quest.","title":"About Us"},{"location":"details/methods/","text":"Scoring Methods \u00b6 This page details parameters for Tesserae's intertext scoring algorithm. Tesserae Original \u00b6 The original Tesserae intertext scoring algorithm was described by Forstall et al. 1 Algorithmic Overview \u00b6 Definitions \u00b6 \"Texts\" refer to literary works. \"Units\" are sections within a text. \"Features\" (or more accurately, \"linguistic features\") are the types of linguistically significant pieces of information found within a unit. For example, words are a feature. \"Tokens\" are the individual instances of a given feature. Consider the following unit: the red truck stopped at the red sign Clearly, this unit contains words. The words \"the\" and \"red\" appear twice in the unit. The first \"the\" is a token distinct from the other \"the\" later in the unit; so also for \"red\". Find Pairs \u00b6 The algorithm begins by finding pairs of source text and target text which share at least two tokens of the same feature that are the same. For example, using the word feature (enforcing exact word matching) on the following two units: nomadic children play with wooden toys wooden horses suggest playing children the token \"children\" occurs in both the first and second units, as does \"wooden\". Additionally, assuming the use of word feature again, the following two units would be considered a pair sharing at least two tokens that are the same: boys hate to lose to other boys there are five boys here and six boys there because they both share two word instances of \"boys\". Reference Frequencies \u00b6 The algorithm then continues by referencing frequency information concerning the matching tokens. Frequency can be defined in terms of text or the corpus. When defined in terms of the text, the frequency of word X is equal to the total number of times the word X appears in the text associated with the unit in which the token X is found, divided by the total number of tokens in that text. For example, suppose we have the following text: a a a a b b b c b b a a a a a b a b a a a b b b a Now suppose the second line of this text is used as a source. Then the frequency of the third token of that line, \"c\", will be 1/25 (since \"c\" appears only once, and there are 25 total tokens in the text). When defined in terms of the corpus, the frequency of word X is equal to the total number of times the word X appears in the corpus, divided by the total number of tokens in the corpus. The corpus is defined to consist of all texts in the Tesserae database with the same language. Thus, the \"latin\" corpus is separate from the \"greek\" corpus. Compute Score \u00b6 Finally, the algorithm computes a score for each unit pair according to the following formula: ln\\left(\\frac{\\sum_{m \\in M}{\\frac{1}{f_{t}(m)}} + \\sum_{m \\in M}{\\frac{1}{f_{s}(m)}}}{d_{t}+d_{s}}\\right) where ln is the natural logarithm function M is the set of tokens that matches between the source and target units in the pair f_t(m) computes the frequency of the feature m with respect to the target unit's text if frequency is computed by corpus, f_s(m) is computed by corpus statistics f_s(m) is like f_t(m) , except that it is with respect to the source d_t is the distance between two tokens in the target unit, where the two tokens are in the set M the distance is calculated by subtraction of the position numbers; i.e., in the unit \"a c c c a\", the two a's are separated by 4 tokens, since the a's occupy the 1st and 5th positions in case that first explanation didn't make sense, adjacent tokens have a distance of 1, tokens with an intervening token have a distance of 2, etc. note that this explanation has been left deliberately ambiguous; for more details, see Distance Basis d_s is like d_t , except that it is with respect to the source (if you find the mathematical symbols too small, you can either use the zoom function on your browser or right click on the math, hover over \"Math Settings\", then over \"Zoom Trigger\", and click on \"Click\"; then click on the math (you can unzoom by clicking again).) Method Parameterization \u00b6 The original Tesserae scoring algorithm can be specified for use at the /matches/ endpoint as a JSON object with the following keys: Key Description \"name\" Set to \"original\" . \"feature\" A string representing the linguistic feature to use for matching and scoring. For more details, see Features . \"stopwords\" A list of strings, where each string represents a feature that should be ignored during matching. This is useful, for example, when you want to ignore common function words. \"freq_basis\" Either \"texts\" or \"corpus\" . If set to \"texts\" , scoring will compute frequency statistics from the texts specified in the /matches/ request; if set to \"corpus\" , frequency statistics will be computed from all texts available in the Tesserae database. \"max_distance\" A positive integer marking the maximum distance separating matching tokens within a unit. In other words, d_s + d_t (from the equation in Compute Score ) must be less than the maximum distance specified in order for a given source and target unit to count as a matching pair. \"distance_basis\" A string describing which matching tokens will be used to calculate distance. For more details, see Distance Basis . Features \u00b6 As noted earlier, the original Tesserae algorithm considers two units to match when they share at least two tokens of the a given (linguistic) feature. The following table describes what features are available for use: Feature Description \"lemma\" Match by dictionary headword. \"semantic\" TODO: Figure out what semantic means. \"sound\" Match by phonetic trigrams. \"word\" Match by exact word. Any one of these features can be used as the value to the \"feature\" key in the JSON object parameterizing the original Tesserae scoring algorithm to use at the /matches/ endpoint. Distance Basis \u00b6 As noted earlier, the distance between tokens is important to how the score for a pair is calculated. The following table describes the options for determining this distance: Distance Basis Description \"span\" The two farthest apart matching tokens within the unit are used. \"span-target\" The two farthest apart matching tokens in the target unit only are used; d_s=0 in this case. \"span-source\" The two farthest apart matching tokens in the source unit only are used; d_t=0 in this case. \"frequency\" The two lowest frequency tokens within the unit are used. \"frequency-target\" The two lowest frequency tokens within the target unit only are used; d_s=0 in this case. \"frequency-source\" The two lowest frequency tokens within the source unit only are used; d_t=0 in this case. Forstall, Christopher, Neil Coffee, Thomas Buck, Katherine Roache, and Sarah Jacobson. \"Modeling the Scholars: Detecting Intertextuality through Enhanced Word-level N-gram Matching.\" Digital Scholarship in the Humanities 30, no. 4 (2014): 503-515. See Figure 1. \u21a9","title":"Scoring Methods"},{"location":"details/methods/#scoring-methods","text":"This page details parameters for Tesserae's intertext scoring algorithm.","title":"Scoring Methods"},{"location":"details/methods/#tesserae-original","text":"The original Tesserae intertext scoring algorithm was described by Forstall et al. 1","title":"Tesserae Original"},{"location":"details/methods/#algorithmic-overview","text":"","title":"Algorithmic Overview"},{"location":"details/methods/#definitions","text":"\"Texts\" refer to literary works. \"Units\" are sections within a text. \"Features\" (or more accurately, \"linguistic features\") are the types of linguistically significant pieces of information found within a unit. For example, words are a feature. \"Tokens\" are the individual instances of a given feature. Consider the following unit: the red truck stopped at the red sign Clearly, this unit contains words. The words \"the\" and \"red\" appear twice in the unit. The first \"the\" is a token distinct from the other \"the\" later in the unit; so also for \"red\".","title":"Definitions"},{"location":"details/methods/#find-pairs","text":"The algorithm begins by finding pairs of source text and target text which share at least two tokens of the same feature that are the same. For example, using the word feature (enforcing exact word matching) on the following two units: nomadic children play with wooden toys wooden horses suggest playing children the token \"children\" occurs in both the first and second units, as does \"wooden\". Additionally, assuming the use of word feature again, the following two units would be considered a pair sharing at least two tokens that are the same: boys hate to lose to other boys there are five boys here and six boys there because they both share two word instances of \"boys\".","title":"Find Pairs"},{"location":"details/methods/#reference-frequencies","text":"The algorithm then continues by referencing frequency information concerning the matching tokens. Frequency can be defined in terms of text or the corpus. When defined in terms of the text, the frequency of word X is equal to the total number of times the word X appears in the text associated with the unit in which the token X is found, divided by the total number of tokens in that text. For example, suppose we have the following text: a a a a b b b c b b a a a a a b a b a a a b b b a Now suppose the second line of this text is used as a source. Then the frequency of the third token of that line, \"c\", will be 1/25 (since \"c\" appears only once, and there are 25 total tokens in the text). When defined in terms of the corpus, the frequency of word X is equal to the total number of times the word X appears in the corpus, divided by the total number of tokens in the corpus. The corpus is defined to consist of all texts in the Tesserae database with the same language. Thus, the \"latin\" corpus is separate from the \"greek\" corpus.","title":"Reference Frequencies"},{"location":"details/methods/#compute-score","text":"Finally, the algorithm computes a score for each unit pair according to the following formula: ln\\left(\\frac{\\sum_{m \\in M}{\\frac{1}{f_{t}(m)}} + \\sum_{m \\in M}{\\frac{1}{f_{s}(m)}}}{d_{t}+d_{s}}\\right) where ln is the natural logarithm function M is the set of tokens that matches between the source and target units in the pair f_t(m) computes the frequency of the feature m with respect to the target unit's text if frequency is computed by corpus, f_s(m) is computed by corpus statistics f_s(m) is like f_t(m) , except that it is with respect to the source d_t is the distance between two tokens in the target unit, where the two tokens are in the set M the distance is calculated by subtraction of the position numbers; i.e., in the unit \"a c c c a\", the two a's are separated by 4 tokens, since the a's occupy the 1st and 5th positions in case that first explanation didn't make sense, adjacent tokens have a distance of 1, tokens with an intervening token have a distance of 2, etc. note that this explanation has been left deliberately ambiguous; for more details, see Distance Basis d_s is like d_t , except that it is with respect to the source (if you find the mathematical symbols too small, you can either use the zoom function on your browser or right click on the math, hover over \"Math Settings\", then over \"Zoom Trigger\", and click on \"Click\"; then click on the math (you can unzoom by clicking again).)","title":"Compute Score"},{"location":"details/methods/#method-parameterization","text":"The original Tesserae scoring algorithm can be specified for use at the /matches/ endpoint as a JSON object with the following keys: Key Description \"name\" Set to \"original\" . \"feature\" A string representing the linguistic feature to use for matching and scoring. For more details, see Features . \"stopwords\" A list of strings, where each string represents a feature that should be ignored during matching. This is useful, for example, when you want to ignore common function words. \"freq_basis\" Either \"texts\" or \"corpus\" . If set to \"texts\" , scoring will compute frequency statistics from the texts specified in the /matches/ request; if set to \"corpus\" , frequency statistics will be computed from all texts available in the Tesserae database. \"max_distance\" A positive integer marking the maximum distance separating matching tokens within a unit. In other words, d_s + d_t (from the equation in Compute Score ) must be less than the maximum distance specified in order for a given source and target unit to count as a matching pair. \"distance_basis\" A string describing which matching tokens will be used to calculate distance. For more details, see Distance Basis .","title":"Method Parameterization"},{"location":"details/methods/#features","text":"As noted earlier, the original Tesserae algorithm considers two units to match when they share at least two tokens of the a given (linguistic) feature. The following table describes what features are available for use: Feature Description \"lemma\" Match by dictionary headword. \"semantic\" TODO: Figure out what semantic means. \"sound\" Match by phonetic trigrams. \"word\" Match by exact word. Any one of these features can be used as the value to the \"feature\" key in the JSON object parameterizing the original Tesserae scoring algorithm to use at the /matches/ endpoint.","title":"Features"},{"location":"details/methods/#distance-basis","text":"As noted earlier, the distance between tokens is important to how the score for a pair is calculated. The following table describes the options for determining this distance: Distance Basis Description \"span\" The two farthest apart matching tokens within the unit are used. \"span-target\" The two farthest apart matching tokens in the target unit only are used; d_s=0 in this case. \"span-source\" The two farthest apart matching tokens in the source unit only are used; d_t=0 in this case. \"frequency\" The two lowest frequency tokens within the unit are used. \"frequency-target\" The two lowest frequency tokens within the target unit only are used; d_s=0 in this case. \"frequency-source\" The two lowest frequency tokens within the source unit only are used; d_t=0 in this case. Forstall, Christopher, Neil Coffee, Thomas Buck, Katherine Roache, and Sarah Jacobson. \"Modeling the Scholars: Detecting Intertextuality through Enhanced Word-level N-gram Matching.\" Digital Scholarship in the Humanities 30, no. 4 (2014): 503-515. See Figure 1. \u21a9","title":"Distance Basis"},{"location":"endpoints/matches/","text":"/matches/ \u00b6 The /matches/ endpoint interacts with Tesserae's intertext discovery capabilities. POST \u00b6 Requesting POST at /matches/ submits a query for discovering intertexts between the texts available in Tesserae's database. The query parameters should be sent as a JSON data payload. Request \u00b6 The JSON data payload representing query parameters must contain the following keys. TODO: On the live server, should we limit the amount of source and target texts allowed to be queried? Key Description source A list of strings representing CTS URNs that identify a unit. The units will be compared with the units listed in target to find intertexts. target A list of strings representing CTS URNs that identify a unit. The units will be compared with the units listed in source to find intertexts. method A JSON object describing the scoring method used to evaluate the intertextual strength of a source text and target text pair. More information on specifying the scoring method can be found in Scoring Methods . Response \u00b6 On success, the data payload contains \u2026 TODO: Figure out what this contains On failure, the data payload contains error information in a JSON object with the following keys: Key Description \"data\" The JSON object received as request data payload. \"message\" A string explaining why the request data payload was rejected. Examples \u00b6 TODO: add examples","title":"/matches/"},{"location":"endpoints/matches/#matches","text":"The /matches/ endpoint interacts with Tesserae's intertext discovery capabilities.","title":"/matches/"},{"location":"endpoints/matches/#post","text":"Requesting POST at /matches/ submits a query for discovering intertexts between the texts available in Tesserae's database. The query parameters should be sent as a JSON data payload.","title":"POST"},{"location":"endpoints/matches/#request","text":"The JSON data payload representing query parameters must contain the following keys. TODO: On the live server, should we limit the amount of source and target texts allowed to be queried? Key Description source A list of strings representing CTS URNs that identify a unit. The units will be compared with the units listed in target to find intertexts. target A list of strings representing CTS URNs that identify a unit. The units will be compared with the units listed in source to find intertexts. method A JSON object describing the scoring method used to evaluate the intertextual strength of a source text and target text pair. More information on specifying the scoring method can be found in Scoring Methods .","title":"Request"},{"location":"endpoints/matches/#response","text":"On success, the data payload contains \u2026 TODO: Figure out what this contains On failure, the data payload contains error information in a JSON object with the following keys: Key Description \"data\" The JSON object received as request data payload. \"message\" A string explaining why the request data payload was rejected.","title":"Response"},{"location":"endpoints/matches/#examples","text":"TODO: add examples","title":"Examples"},{"location":"endpoints/texts/","text":"/texts/ \u00b6 The /texts/ endpoint interacts with Tesserae's database of literary works. GET \u00b6 Requesting GET at /texts/ provides information on literary works stored in Tesserae's database. Request \u00b6 The following fields may be used in a URL query to filter the response: Field Description \"author\" Only database information for texts with the specified author are returned \"after\" Only database information for texts written/published after the specified year are returned; use negative integers for B.C. dates \"before\" Only database information for texts written/published before the specified year are returned; use negative integers for B.C. dates \"cts_urn\" Only database information for texts with the specified CTS URN are returned \"genre\" Only database information for texts with the specified genre are returned \"language\" Only database information for texts with the specified language are returned \"title\" Only database information for texts with the specified title are returned Response \u00b6 On success, the response includes a JSON data payload consisting of an array of objects, where each object contains the following keys: Key Description \"author\" A string identifying the text's author. \"cts_urn\" A string which uniquely identifies the text according to the Canonical Text Services conventions. \"genre\" A string identifying the text's genre; it is either \"poetry\" or \"prose\". \"language\" A string identifying the composition language of the text. \"title\" A string identifying the text's name. \"year\" An integer representing the text's publication year; a negative integer corresponds to the BC era. Examples \u00b6 Search by One Field \u00b6 Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/texts/?author=Vergil\" Response: HTTP/1.0 200 OK ... [ { \"author\": \"Vergil\", ... }, ... ] Search by Multiple Fields \u00b6 Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/texts/?after=100&language=latin\" Response: HTTP/1.0 200 OK ... [ { ... \"language\": \"latin\", ... \"year\": 101 }, ... ] POST \u00b6 NB: The POST method for /texts/ is available only on the administrative server Requesting POST at /texts/ with an appropriate JSON data payload will add the text described by the JSON data to Tesserae's database. Request \u00b6 Appropriate JSON data for a POST at /texts/ must be a JSON object containing the following keys: Key Description \"author\" A string identifying the text's author. \"cts_urn\" A string which uniquely identifies the text according to the Canonical Text Services conventions. \"genre\" A string identifying the text's genre; it is either \"poetry\" or \"prose\". \"language\" A string identifying the composition language of the text. \"path\" A string identifying the location of the text's contents. \"title\" A string identifying the text's name. \"year\" An integer representing the text's publication year; a negative integer corresponds to the BC era. Response \u00b6 On success, there is no reponse data payload. On failure, the data payload contains error information in a JSON object with the following keys: Key Description \"data\" The JSON object received as request data payload. \"message\" A string explaining why the request data payload was rejected. Examples \u00b6 Upload a New Text \u00b6 Request: curl -i -X POST \"https://tesserae.caset.buffalo.edu/texts/\" -d '{ \\ \"author\": \"Lucan\", \\ \"cts_urn\": \"urn:cts:latinLit:phi0917.phi001\", \\ \"genre\": \"poetry\", \\ \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \\ \"language\": \"latin\", \\ \"title\": \"Bellum Civile\", \\ \"year\": 65 \\ }' Response: HTTP/1.0 200 OK ... Upload a Text Already in the Database \u00b6 Assume that an entry in the database with the CTS URN \"urn:cts:latinLit:phi0917.phi001\" already exists. Request: curl -i -X POST \"https://tesserae.caset.buffalo.edu/texts/\" -d '{ \\ \"author\": \"Lucan\", \\ \"cts_urn\": \"urn:cts:latinLit:phi0917.phi001\", \\ \"genre\": \"poetry\", \\ \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \\ \"language\": \"latin\", \\ \"title\": \"Bellum Civile\", \\ \"year\": 65 \\ }' Response: HTTP/1.0 400 Bad Request ... { \"data\": { \"author\": \"Lucan\", \"cts_urn\": \"urn:cts:latinLit:phi0917.phi001\", \"genre\": \"poetry\", \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \"language\": \"latin\", \"title\": \"Bellum Civile\", \"year\": 65 }, \"message\": \"The CTS URN provided (urn:cts:latinLit:phi0917.phi001) already exists in the database. If you meant to update the text information, try PUT.\" } Upload a Text with Insufficient Information \u00b6 Request: curl -i -X POST \"https://tesserae.caset.buffalo.edu/texts/\" -d '{ \\ \"author\": \"Lucan\", \\ \"genre\": \"poetry\", \\ \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \\ \"language\": \"latin\", \\ \"title\": \"Bellum Civile\", \\ \"year\": 65 \\ }' Response: HTTP/1.0 400 Bad Request ... { \"data\": { \"author\": \"Lucan\", \"genre\": \"poetry\", \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \"language\": \"latin\", \"title\": \"Bellum Civile\", \"year\": 65 }, \"message\": \"The request data payload is missing the following required key(s): cts_urn.\" } PATCH \u00b6 NB: The PATCH method for /texts/ is available only on the administrative server Requesting PATCH at /texts/ with an appropriate JSON data payload will update the text described by the JSON data in Tesserae's database. Request \u00b6 Appropriate JSON data for a PATCH at /texts/ must contain the cts_urn key, associated with a value corresponding to the CTS URN of a text entry in Tesserae's database. Any other keys with their values in the request data payload will update values corresponding to those keys for the text entry in Tesserae's database. NB: You cannot update a text's CTS URN with a PATCH at /texts/ . For this case, consider a DELETE followed by a POST. Response \u00b6 On success, the data payload contains the text entry in Tesserae's database after the update has been made. On failure, the data payload contains error information in a JSON object with the following keys: Key Description \"data\" The JSON object received as request data payload. \"message\" A string explaining why the request data payload was rejected. Examples \u00b6 Update a Text \u00b6 Assume that the following entry exists in the database: { \"author\": \"Lucan\", \"cts_urn\": \"urn:cts:latinLit:phi0917.phi001\", \"genre\": \"poetry\", \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \"language\": \"latin\", \"title\": \"Bellum Civile\", \"year\": 65 } Request: curl -i -X PATCH \"https://tesserae.caset.buffalo.edu/texts/\" -d '{ \\ \"cts_urn\": \"urn:cts:latinLit:phi0917.phi001\", \\ \"title\": \"Pharsalia\" \\ }' Response: HTTP/1.0 200 OK ... { \"author\": \"Lucan\", \"cts_urn\": \"urn:cts:latinLit:phi0917.phi001\", \"genre\": \"poetry\", \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \"language\": \"latin\", \"title\": \"Pharsalia\", \"year\": 65 } Add New Information to a Text \u00b6 Assume that the following entry exists in the database: { \"author\": \"Lucan\", \"cts_urn\": \"urn:cts:latinLit:phi0917.phi001\", \"genre\": \"poetry\", \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \"language\": \"latin\", \"title\": \"Bellum Civile\", \"year\": 65 } Request: curl -i -X PATCH \"https://tesserae.caset.buffalo.edu/texts/\" -d '{ \\ \"cts_urn\": \"urn:cts:latinLit:phi0917.phi001\", \\ \"alternate_title\": \"Pharsalia\" \\ }' Response: HTTP/1.0 200 OK ... { \"alternate_title\": \"Pharsalia\" \"author\": \"Lucan\", \"cts_urn\": \"urn:cts:latinLit:phi0917.phi001\", \"genre\": \"poetry\", \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \"language\": \"latin\", \"title\": \"Bellum Civile\", \"year\": 65 } Update a Text Not in the Database \u00b6 Assume that no entry in the database has the CTS URN \"DEADBEEF\". Request: curl -i -X PATCH \"https://tesserae.caset.buffalo.edu/texts/\" -d '{ \\ \"cts_urn\": \"DEADBEEF\", \\ \"fail\": \"this example will\" \\ }' Response: HTTP/1.0 400 Bad Request ... { \"data\": { \"cts_urn\": \"DEADBEEF\", \"fail\": \"this example will\" }, \"message\": \"No text with the provided CTS URN (DEADBEEF) was found in the database.\" } DELETE \u00b6 NB: The DELETE method for /texts/ is available only on the administrative server Requesting DELETE at /texts/ with an appropriate JSON data payload will delete the text described by the JSON data from Tesserae's database. Request \u00b6 Appropriate JSON data for a DELETE at /texts/ must contain the cts_urn key, associated with a value corresponding to the CTS URN of a text entry in Tesserae's database. Response \u00b6 On success, there is no response data payload. On failure, the data payload contains error information in a JSON object with the following keys: Key Description \"data\" The JSON object received as request data payload. \"message\" A string explaining why the request data payload was rejected. Examples \u00b6 Delete a Text \u00b6 Assume that the following entry exists in the database: { \"author\": \"Lucan\", \"cts_urn\": \"urn:cts:latinLit:phi0917.phi001\", \"genre\": \"poetry\", \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \"language\": \"latin\", \"title\": \"Bellum Civile\", \"year\": 65 } Request: curl -i -X DELETE \"https://tesserae.caset.buffalo.edu/texts/\" -d '{ \\ \"cts_urn\": \"urn:cts:latinLit:phi0917.phi001\" \\ }' Response: HTTP/1.0 204 No Content ... Delete a Text Not in the Database \u00b6 Assume that no entry in the database has the CTS URN \"DEADBEEF\". Request: curl -i -X DELETE \"https://tesserae.caset.buffalo.edu/texts/\" -d '{ \\ \"cts_urn\": \"DEADBEEF\" \\ }' Response: HTTP/1.0 400 Bad Request ... { \"data\": { \"cts_urn\": \"DEADBEEF\" }, \"message\": \"No text with the provided CTS URN (DEADBEEF) was found in the database.\" }","title":"/texts/"},{"location":"endpoints/texts/#texts","text":"The /texts/ endpoint interacts with Tesserae's database of literary works.","title":"/texts/"},{"location":"endpoints/texts/#get","text":"Requesting GET at /texts/ provides information on literary works stored in Tesserae's database.","title":"GET"},{"location":"endpoints/texts/#request","text":"The following fields may be used in a URL query to filter the response: Field Description \"author\" Only database information for texts with the specified author are returned \"after\" Only database information for texts written/published after the specified year are returned; use negative integers for B.C. dates \"before\" Only database information for texts written/published before the specified year are returned; use negative integers for B.C. dates \"cts_urn\" Only database information for texts with the specified CTS URN are returned \"genre\" Only database information for texts with the specified genre are returned \"language\" Only database information for texts with the specified language are returned \"title\" Only database information for texts with the specified title are returned","title":"Request"},{"location":"endpoints/texts/#response","text":"On success, the response includes a JSON data payload consisting of an array of objects, where each object contains the following keys: Key Description \"author\" A string identifying the text's author. \"cts_urn\" A string which uniquely identifies the text according to the Canonical Text Services conventions. \"genre\" A string identifying the text's genre; it is either \"poetry\" or \"prose\". \"language\" A string identifying the composition language of the text. \"title\" A string identifying the text's name. \"year\" An integer representing the text's publication year; a negative integer corresponds to the BC era.","title":"Response"},{"location":"endpoints/texts/#examples","text":"","title":"Examples"},{"location":"endpoints/texts/#search-by-one-field","text":"Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/texts/?author=Vergil\" Response: HTTP/1.0 200 OK ... [ { \"author\": \"Vergil\", ... }, ... ]","title":"Search by One Field"},{"location":"endpoints/texts/#search-by-multiple-fields","text":"Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/texts/?after=100&language=latin\" Response: HTTP/1.0 200 OK ... [ { ... \"language\": \"latin\", ... \"year\": 101 }, ... ]","title":"Search by Multiple Fields"},{"location":"endpoints/texts/#post","text":"NB: The POST method for /texts/ is available only on the administrative server Requesting POST at /texts/ with an appropriate JSON data payload will add the text described by the JSON data to Tesserae's database.","title":"POST"},{"location":"endpoints/texts/#request_1","text":"Appropriate JSON data for a POST at /texts/ must be a JSON object containing the following keys: Key Description \"author\" A string identifying the text's author. \"cts_urn\" A string which uniquely identifies the text according to the Canonical Text Services conventions. \"genre\" A string identifying the text's genre; it is either \"poetry\" or \"prose\". \"language\" A string identifying the composition language of the text. \"path\" A string identifying the location of the text's contents. \"title\" A string identifying the text's name. \"year\" An integer representing the text's publication year; a negative integer corresponds to the BC era.","title":"Request"},{"location":"endpoints/texts/#response_1","text":"On success, there is no reponse data payload. On failure, the data payload contains error information in a JSON object with the following keys: Key Description \"data\" The JSON object received as request data payload. \"message\" A string explaining why the request data payload was rejected.","title":"Response"},{"location":"endpoints/texts/#examples_1","text":"","title":"Examples"},{"location":"endpoints/texts/#upload-a-new-text","text":"Request: curl -i -X POST \"https://tesserae.caset.buffalo.edu/texts/\" -d '{ \\ \"author\": \"Lucan\", \\ \"cts_urn\": \"urn:cts:latinLit:phi0917.phi001\", \\ \"genre\": \"poetry\", \\ \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \\ \"language\": \"latin\", \\ \"title\": \"Bellum Civile\", \\ \"year\": 65 \\ }' Response: HTTP/1.0 200 OK ...","title":"Upload a New Text"},{"location":"endpoints/texts/#upload-a-text-already-in-the-database","text":"Assume that an entry in the database with the CTS URN \"urn:cts:latinLit:phi0917.phi001\" already exists. Request: curl -i -X POST \"https://tesserae.caset.buffalo.edu/texts/\" -d '{ \\ \"author\": \"Lucan\", \\ \"cts_urn\": \"urn:cts:latinLit:phi0917.phi001\", \\ \"genre\": \"poetry\", \\ \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \\ \"language\": \"latin\", \\ \"title\": \"Bellum Civile\", \\ \"year\": 65 \\ }' Response: HTTP/1.0 400 Bad Request ... { \"data\": { \"author\": \"Lucan\", \"cts_urn\": \"urn:cts:latinLit:phi0917.phi001\", \"genre\": \"poetry\", \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \"language\": \"latin\", \"title\": \"Bellum Civile\", \"year\": 65 }, \"message\": \"The CTS URN provided (urn:cts:latinLit:phi0917.phi001) already exists in the database. If you meant to update the text information, try PUT.\" }","title":"Upload a Text Already in the Database"},{"location":"endpoints/texts/#upload-a-text-with-insufficient-information","text":"Request: curl -i -X POST \"https://tesserae.caset.buffalo.edu/texts/\" -d '{ \\ \"author\": \"Lucan\", \\ \"genre\": \"poetry\", \\ \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \\ \"language\": \"latin\", \\ \"title\": \"Bellum Civile\", \\ \"year\": 65 \\ }' Response: HTTP/1.0 400 Bad Request ... { \"data\": { \"author\": \"Lucan\", \"genre\": \"poetry\", \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \"language\": \"latin\", \"title\": \"Bellum Civile\", \"year\": 65 }, \"message\": \"The request data payload is missing the following required key(s): cts_urn.\" }","title":"Upload a Text with Insufficient Information"},{"location":"endpoints/texts/#patch","text":"NB: The PATCH method for /texts/ is available only on the administrative server Requesting PATCH at /texts/ with an appropriate JSON data payload will update the text described by the JSON data in Tesserae's database.","title":"PATCH"},{"location":"endpoints/texts/#request_2","text":"Appropriate JSON data for a PATCH at /texts/ must contain the cts_urn key, associated with a value corresponding to the CTS URN of a text entry in Tesserae's database. Any other keys with their values in the request data payload will update values corresponding to those keys for the text entry in Tesserae's database. NB: You cannot update a text's CTS URN with a PATCH at /texts/ . For this case, consider a DELETE followed by a POST.","title":"Request"},{"location":"endpoints/texts/#response_2","text":"On success, the data payload contains the text entry in Tesserae's database after the update has been made. On failure, the data payload contains error information in a JSON object with the following keys: Key Description \"data\" The JSON object received as request data payload. \"message\" A string explaining why the request data payload was rejected.","title":"Response"},{"location":"endpoints/texts/#examples_2","text":"","title":"Examples"},{"location":"endpoints/texts/#update-a-text","text":"Assume that the following entry exists in the database: { \"author\": \"Lucan\", \"cts_urn\": \"urn:cts:latinLit:phi0917.phi001\", \"genre\": \"poetry\", \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \"language\": \"latin\", \"title\": \"Bellum Civile\", \"year\": 65 } Request: curl -i -X PATCH \"https://tesserae.caset.buffalo.edu/texts/\" -d '{ \\ \"cts_urn\": \"urn:cts:latinLit:phi0917.phi001\", \\ \"title\": \"Pharsalia\" \\ }' Response: HTTP/1.0 200 OK ... { \"author\": \"Lucan\", \"cts_urn\": \"urn:cts:latinLit:phi0917.phi001\", \"genre\": \"poetry\", \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \"language\": \"latin\", \"title\": \"Pharsalia\", \"year\": 65 }","title":"Update a Text"},{"location":"endpoints/texts/#add-new-information-to-a-text","text":"Assume that the following entry exists in the database: { \"author\": \"Lucan\", \"cts_urn\": \"urn:cts:latinLit:phi0917.phi001\", \"genre\": \"poetry\", \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \"language\": \"latin\", \"title\": \"Bellum Civile\", \"year\": 65 } Request: curl -i -X PATCH \"https://tesserae.caset.buffalo.edu/texts/\" -d '{ \\ \"cts_urn\": \"urn:cts:latinLit:phi0917.phi001\", \\ \"alternate_title\": \"Pharsalia\" \\ }' Response: HTTP/1.0 200 OK ... { \"alternate_title\": \"Pharsalia\" \"author\": \"Lucan\", \"cts_urn\": \"urn:cts:latinLit:phi0917.phi001\", \"genre\": \"poetry\", \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \"language\": \"latin\", \"title\": \"Bellum Civile\", \"year\": 65 }","title":"Add New Information to a Text"},{"location":"endpoints/texts/#update-a-text-not-in-the-database","text":"Assume that no entry in the database has the CTS URN \"DEADBEEF\". Request: curl -i -X PATCH \"https://tesserae.caset.buffalo.edu/texts/\" -d '{ \\ \"cts_urn\": \"DEADBEEF\", \\ \"fail\": \"this example will\" \\ }' Response: HTTP/1.0 400 Bad Request ... { \"data\": { \"cts_urn\": \"DEADBEEF\", \"fail\": \"this example will\" }, \"message\": \"No text with the provided CTS URN (DEADBEEF) was found in the database.\" }","title":"Update a Text Not in the Database"},{"location":"endpoints/texts/#delete","text":"NB: The DELETE method for /texts/ is available only on the administrative server Requesting DELETE at /texts/ with an appropriate JSON data payload will delete the text described by the JSON data from Tesserae's database.","title":"DELETE"},{"location":"endpoints/texts/#request_3","text":"Appropriate JSON data for a DELETE at /texts/ must contain the cts_urn key, associated with a value corresponding to the CTS URN of a text entry in Tesserae's database.","title":"Request"},{"location":"endpoints/texts/#response_3","text":"On success, there is no response data payload. On failure, the data payload contains error information in a JSON object with the following keys: Key Description \"data\" The JSON object received as request data payload. \"message\" A string explaining why the request data payload was rejected.","title":"Response"},{"location":"endpoints/texts/#examples_3","text":"","title":"Examples"},{"location":"endpoints/texts/#delete-a-text","text":"Assume that the following entry exists in the database: { \"author\": \"Lucan\", \"cts_urn\": \"urn:cts:latinLit:phi0917.phi001\", \"genre\": \"poetry\", \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \"language\": \"latin\", \"title\": \"Bellum Civile\", \"year\": 65 } Request: curl -i -X DELETE \"https://tesserae.caset.buffalo.edu/texts/\" -d '{ \\ \"cts_urn\": \"urn:cts:latinLit:phi0917.phi001\" \\ }' Response: HTTP/1.0 204 No Content ...","title":"Delete a Text"},{"location":"endpoints/texts/#delete-a-text-not-in-the-database","text":"Assume that no entry in the database has the CTS URN \"DEADBEEF\". Request: curl -i -X DELETE \"https://tesserae.caset.buffalo.edu/texts/\" -d '{ \\ \"cts_urn\": \"DEADBEEF\" \\ }' Response: HTTP/1.0 400 Bad Request ... { \"data\": { \"cts_urn\": \"DEADBEEF\" }, \"message\": \"No text with the provided CTS URN (DEADBEEF) was found in the database.\" }","title":"Delete a Text Not in the Database"},{"location":"endpoints/tokens/","text":"","title":"Tokens"},{"location":"endpoints/units/","text":"","title":"Units"},{"location":"getting-started/tutorial/","text":"Tutorial \u00b6 This page describes some basic concepts of web API's in general, using examples from Tesserae's API. The only skill assumed here is the ability to use a web browser. HyperText Transfer Protocol: How the Internet Works \u00b6 TODO: explain HTTP methods Filtering Query Results \u00b6 You can provide URL query strings to filter the results. For example, the HTTP GET request for the resource https://tesserae.caset.buffalo.edu/texts/?author=Vergil asks Tesserae for information on literary works in its database that have \"Vergil\" as an author. Multiple query filters can be applied, as shown in the following example: https://tesserae.caset.buffalo.edu/texts/?author=Vergil&title=Georgics This URL asks Tesserae for information on literary works in its database that have \"Vergil\" as an author and \"Georgics\" as the title. TODO: Fill out rest of tutorial","title":"Tutorial"},{"location":"getting-started/tutorial/#tutorial","text":"This page describes some basic concepts of web API's in general, using examples from Tesserae's API. The only skill assumed here is the ability to use a web browser.","title":"Tutorial"},{"location":"getting-started/tutorial/#hypertext-transfer-protocol-how-the-internet-works","text":"TODO: explain HTTP methods","title":"HyperText Transfer Protocol:  How the Internet Works"},{"location":"getting-started/tutorial/#filtering-query-results","text":"You can provide URL query strings to filter the results. For example, the HTTP GET request for the resource https://tesserae.caset.buffalo.edu/texts/?author=Vergil asks Tesserae for information on literary works in its database that have \"Vergil\" as an author. Multiple query filters can be applied, as shown in the following example: https://tesserae.caset.buffalo.edu/texts/?author=Vergil&title=Georgics This URL asks Tesserae for information on literary works in its database that have \"Vergil\" as an author and \"Georgics\" as the title. TODO: Fill out rest of tutorial","title":"Filtering Query Results"}]}