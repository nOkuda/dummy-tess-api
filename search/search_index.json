{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 If you want to learn how to interact with the Tesserae API, you\u2019ve come to the right place. The information presented here includes the promises we make about what you can expect from us, dependent on what we expect from you (\u201cspecifications\u201d, they say). We\u2019ll also present examples to help set expectations. About Us \u00b6 TODO: link Tesserae project Who are \u201cwe\u201d? We are digital humanists, associated with the Tesserae project. We are interested in intertextual relationships, and we use computational methods to aid us in this quest.","title":"Home"},{"location":"#introduction","text":"If you want to learn how to interact with the Tesserae API, you\u2019ve come to the right place. The information presented here includes the promises we make about what you can expect from us, dependent on what we expect from you (\u201cspecifications\u201d, they say). We\u2019ll also present examples to help set expectations.","title":"Introduction"},{"location":"#about-us","text":"TODO: link Tesserae project Who are \u201cwe\u201d? We are digital humanists, associated with the Tesserae project. We are interested in intertextual relationships, and we use computational methods to aid us in this quest.","title":"About Us"},{"location":"details/cached-results/","text":"Cached Results \u00b6 This page describes expected server behavior with respect to Tesserae search results. Context \u00b6 A Tesserae search occurs when Tesserae is given a set of text spans in which to search for intertexts with another set of text spans, according to some set of parameters. The results of this search, then, will always be the same given the same sets of text spans and set of parameters. Thus, it is possible to save the results in cache (i.e., cache the results) so that when the same sets of texts and same set of parameters are given, the same results can be returned without repeating the work. Expiration of Cache \u00b6 It is normal policy to purge cached items if they are not requested for some period of time. Since the same results could be obtained again based on the same sets of text spans and set of parameters, the only difference between retrieving from cache and re-computing the results is the time it takes to obtain a response (re-computing will take longer). Additionally, items retrieved more often from cache are more likely to remain in cache. Problems with Results as Resource \u00b6 Although it is also possible to directly query for the results using the /parallels/<uuid>/ endpoint, this is discouraged. Because expired results are purged, they no longer exist as resources. As a result, it is possible to receive a 404 error for results obtained in the past. For this reason, it is recommended that API users re-submit Tesserae searches. If the results are still in cache, the redirect response will come almost immediately; otherwise, the redirect response will come after the results are computed. In either case, the URL provided for the redirect is guaranteed to contain the search results. Compression of Results \u00b6 Because we have chosen to use CTS URNs as the basis of indexing into texts, redundant information is especially abundant in the Tesserae search request and in the search results. For this reason, we recommend that communication of search requests and results utilize the gzip compression algorithm to reduce the size of transferred information.","title":"Cached Results"},{"location":"details/cached-results/#cached-results","text":"This page describes expected server behavior with respect to Tesserae search results.","title":"Cached Results"},{"location":"details/cached-results/#context","text":"A Tesserae search occurs when Tesserae is given a set of text spans in which to search for intertexts with another set of text spans, according to some set of parameters. The results of this search, then, will always be the same given the same sets of text spans and set of parameters. Thus, it is possible to save the results in cache (i.e., cache the results) so that when the same sets of texts and same set of parameters are given, the same results can be returned without repeating the work.","title":"Context"},{"location":"details/cached-results/#expiration-of-cache","text":"It is normal policy to purge cached items if they are not requested for some period of time. Since the same results could be obtained again based on the same sets of text spans and set of parameters, the only difference between retrieving from cache and re-computing the results is the time it takes to obtain a response (re-computing will take longer). Additionally, items retrieved more often from cache are more likely to remain in cache.","title":"Expiration of Cache"},{"location":"details/cached-results/#problems-with-results-as-resource","text":"Although it is also possible to directly query for the results using the /parallels/<uuid>/ endpoint, this is discouraged. Because expired results are purged, they no longer exist as resources. As a result, it is possible to receive a 404 error for results obtained in the past. For this reason, it is recommended that API users re-submit Tesserae searches. If the results are still in cache, the redirect response will come almost immediately; otherwise, the redirect response will come after the results are computed. In either case, the URL provided for the redirect is guaranteed to contain the search results.","title":"Problems with Results as Resource"},{"location":"details/cached-results/#compression-of-results","text":"Because we have chosen to use CTS URNs as the basis of indexing into texts, redundant information is especially abundant in the Tesserae search request and in the search results. For this reason, we recommend that communication of search requests and results utilize the gzip compression algorithm to reduce the size of transferred information.","title":"Compression of Results"},{"location":"details/methods/","text":"Scoring Methods \u00b6 This page details parameters for Tesserae\u2019s intertext scoring algorithm. Tesserae Original \u00b6 The original Tesserae intertext scoring algorithm was described by Forstall et al. 1 Algorithmic Overview \u00b6 Definitions \u00b6 \u201cTexts\u201d refer to literary works. \u201cUnits\u201d are sections within a text. \u201cFeatures\u201d (or more accurately, \u201clinguistic features\u201d) are the types of linguistically significant pieces of information found within a text span. For example, words are a feature. \u201cTokens\u201d are the individual instances of a given feature. Consider the following text span the red truck stopped at the red sign Clearly, this span contains words as features. The words \u201cthe\u201d and \u201cred\u201d appear twice in the span. The first \u201cthe\u201d is a token distinct from the other \u201cthe\u201d later in the span; so also for \u201cred\u201d. Find Parallels \u00b6 The algorithm begins by finding pairs of source text and target text spans which share at least two tokens of the same feature. These pairs are called parallels. For example, using the word feature (enforcing exact word matching) on the following two spans nomadic children play with wooden toys wooden horses suggest playing children the token \u201cchildren\u201d occurs in both the first and second spans, as does \u201cwooden\u201d. Additionally, assuming the use of word feature again, the following two spans would be considered a pair sharing at least two tokens that are the same: boys hate to lose to other boys there are five boys here and six boys there because they both share two word instances of \u201cboys\u201d. Reference Frequencies \u00b6 The algorithm then continues by referencing frequency information concerning the matching tokens. Frequency can be defined in terms of either the text or the corpus. When defined in terms of some text Y, the frequency of word X is equal to the total number of tokens of the word X appearing in the text Y, divided by the total number of tokens in text Y. For example, suppose we have the following text: a a a a b b b c b b a a a a a b a b a a a b b b a Now suppose the second line of this text is used as a source. Then the frequency of the third token of that line, \u201cc\u201d, will be 1/25 (since there is only one token of the word \u201cc\u201d, and there are 25 total tokens in the text). When defined in terms of the corpus, the frequency of word X is equal to the total number of tokens of the word X appearing in the corpus, divided by the total number of tokens in the corpus. The corpus is defined to consist of all texts in the Tesserae database with the same language. Thus, the \"latin\" corpus is separate from the \"greek\" corpus. Compute Score \u00b6 Finally, the algorithm computes a score for each text span pair according to the following formula: ln\\left(\\frac{\\sum_{m \\in M}{\\frac{1}{f_{t}(m)}} + \\sum_{m \\in M}{\\frac{1}{f_{s}(m)}}}{d_{t}+d_{s}}\\right) where ln is the natural logarithm function M is the set of token types that both the source and target spans in the pair a token of a type in M is called a \u201cmatching token\u201d f_t(m) computes the frequency of the feature m with respect to the target span\u2019s text if frequency is computed by corpus, f_s(m) is computed by corpus statistics f_s(m) is like f_t(m) , except that it is with respect to the source d_t is the distance between two matching tokens in the target span (note that because the two tokens are matching, they must both be in the set M ) the distance is calculated by subtraction of the position numbers; i.e., in the text span \u201ca c c c a\u201d, the two a\u2019s are separated by 4 tokens, since the a\u2019s occupy the 1st and 5th positions an equivalent definition of distance: adjacent tokens have a distance of 1, tokens with an intervening token have a distance of 2, etc. which two matching tokens are used for calculating distance is a parameter that can be chosen; for more details, see Distance Basis d_s is like d_t , except that it is with respect to the source (if you find the mathematical symbols too small, you can either use the zoom function on your browser or right click on the math, hover over \u201cMath Settings\u201d, then over \u201cZoom Trigger\u201d, and click on \u201cClick\u201d; then click on the math (you can unzoom by clicking again).) Method Parameterization \u00b6 The original Tesserae scoring algorithm can be specified for use at the /parallels/ endpoint as a JSON object with the following keys: Key Value \"name\" Set to \"original\" . \"feature\" A string representing the linguistic feature to use for matching and scoring. For more details, see Features . \"stopwords\" A list of strings, where each string represents a feature that should be ignored during matching. This is useful, for example, when you want to ignore common function words. \"freq_basis\" Either \"texts\" or \"corpus\" . If set to \"texts\" , scoring will compute frequency of a given token based on the text in which it is found; if set to \"corpus\" , frequency of a given token will be computed from all texts available in the Tesserae database of the same language as the text in which the token is found. For more explanation, refer to Reference Frequences . \"max_distance\" A positive integer marking the maximum distance separating matching tokens within a span. In other words, d_s + d_t (from the equation in Compute Score ) must be less than the maximum distance specified in order for a given source and target span to count as a parallel. Setting this to some large value (like 999 whn comparing lines of poetry) effectively makes this parameter unrestrictive. \"distance_basis\" A string describing which matching tokens will be used to calculate distance. For more details, see Distance Basis . Features \u00b6 As noted earlier, the original Tesserae algorithm considers two spans to match when they share at least two tokens of the specified (linguistic) feature. The following table describes what values are available for use with the \"feature\" key in the JSON object parameterizing the original Tesserae scoring algorithm sent as the request data payload at the /parallels/ endpoint: Feature Description \"lemma\" Match by dictionary headword. \"semantic\" TODO: Figure out what semantic means. \"sound\" Match by phonetic trigrams. \"word\" Match by exact word. Distance Basis \u00b6 As noted earlier, the distance between tokens is important to how the score for a pair is calculated. The following table describes the options for determining this distance: Distance Basis Description \"span\" The two farthest apart matching tokens within the span are used; d_t>0 and d_s>0 in this case. \"span-target\" The two farthest apart matching tokens in the target span only are used; d_t>0 and d_s=0 in this case. \"span-source\" The two farthest apart matching tokens in the source span only are used; d_t=0 and d_s>0 in this case. \"frequency\" The two lowest frequency tokens within the span are used. d_t>0 and d_s>0 in this case. \"frequency-target\" The two lowest frequency tokens within the target span only are used; d_t>0 and d_s=0 in this case. \"frequency-source\" The two lowest frequency tokens within the source span only are used; d_t=0 and d_s>0 in this case. Forstall, Christopher, Neil Coffee, Thomas Buck, Katherine Roache, and Sarah Jacobson. \u201cModeling the Scholars: Detecting Intertextuality through Enhanced Word-level N-gram Matching.\u201d Digital Scholarship in the Humanities 30, no. 4 (2014): 503-515. See Figure 1. \u21a9","title":"Scoring Methods"},{"location":"details/methods/#scoring-methods","text":"This page details parameters for Tesserae\u2019s intertext scoring algorithm.","title":"Scoring Methods"},{"location":"details/methods/#tesserae-original","text":"The original Tesserae intertext scoring algorithm was described by Forstall et al. 1","title":"Tesserae Original"},{"location":"details/methods/#algorithmic-overview","text":"","title":"Algorithmic Overview"},{"location":"details/methods/#definitions","text":"\u201cTexts\u201d refer to literary works. \u201cUnits\u201d are sections within a text. \u201cFeatures\u201d (or more accurately, \u201clinguistic features\u201d) are the types of linguistically significant pieces of information found within a text span. For example, words are a feature. \u201cTokens\u201d are the individual instances of a given feature. Consider the following text span the red truck stopped at the red sign Clearly, this span contains words as features. The words \u201cthe\u201d and \u201cred\u201d appear twice in the span. The first \u201cthe\u201d is a token distinct from the other \u201cthe\u201d later in the span; so also for \u201cred\u201d.","title":"Definitions"},{"location":"details/methods/#find-parallels","text":"The algorithm begins by finding pairs of source text and target text spans which share at least two tokens of the same feature. These pairs are called parallels. For example, using the word feature (enforcing exact word matching) on the following two spans nomadic children play with wooden toys wooden horses suggest playing children the token \u201cchildren\u201d occurs in both the first and second spans, as does \u201cwooden\u201d. Additionally, assuming the use of word feature again, the following two spans would be considered a pair sharing at least two tokens that are the same: boys hate to lose to other boys there are five boys here and six boys there because they both share two word instances of \u201cboys\u201d.","title":"Find Parallels"},{"location":"details/methods/#reference-frequencies","text":"The algorithm then continues by referencing frequency information concerning the matching tokens. Frequency can be defined in terms of either the text or the corpus. When defined in terms of some text Y, the frequency of word X is equal to the total number of tokens of the word X appearing in the text Y, divided by the total number of tokens in text Y. For example, suppose we have the following text: a a a a b b b c b b a a a a a b a b a a a b b b a Now suppose the second line of this text is used as a source. Then the frequency of the third token of that line, \u201cc\u201d, will be 1/25 (since there is only one token of the word \u201cc\u201d, and there are 25 total tokens in the text). When defined in terms of the corpus, the frequency of word X is equal to the total number of tokens of the word X appearing in the corpus, divided by the total number of tokens in the corpus. The corpus is defined to consist of all texts in the Tesserae database with the same language. Thus, the \"latin\" corpus is separate from the \"greek\" corpus.","title":"Reference Frequencies"},{"location":"details/methods/#compute-score","text":"Finally, the algorithm computes a score for each text span pair according to the following formula: ln\\left(\\frac{\\sum_{m \\in M}{\\frac{1}{f_{t}(m)}} + \\sum_{m \\in M}{\\frac{1}{f_{s}(m)}}}{d_{t}+d_{s}}\\right) where ln is the natural logarithm function M is the set of token types that both the source and target spans in the pair a token of a type in M is called a \u201cmatching token\u201d f_t(m) computes the frequency of the feature m with respect to the target span\u2019s text if frequency is computed by corpus, f_s(m) is computed by corpus statistics f_s(m) is like f_t(m) , except that it is with respect to the source d_t is the distance between two matching tokens in the target span (note that because the two tokens are matching, they must both be in the set M ) the distance is calculated by subtraction of the position numbers; i.e., in the text span \u201ca c c c a\u201d, the two a\u2019s are separated by 4 tokens, since the a\u2019s occupy the 1st and 5th positions an equivalent definition of distance: adjacent tokens have a distance of 1, tokens with an intervening token have a distance of 2, etc. which two matching tokens are used for calculating distance is a parameter that can be chosen; for more details, see Distance Basis d_s is like d_t , except that it is with respect to the source (if you find the mathematical symbols too small, you can either use the zoom function on your browser or right click on the math, hover over \u201cMath Settings\u201d, then over \u201cZoom Trigger\u201d, and click on \u201cClick\u201d; then click on the math (you can unzoom by clicking again).)","title":"Compute Score"},{"location":"details/methods/#method-parameterization","text":"The original Tesserae scoring algorithm can be specified for use at the /parallels/ endpoint as a JSON object with the following keys: Key Value \"name\" Set to \"original\" . \"feature\" A string representing the linguistic feature to use for matching and scoring. For more details, see Features . \"stopwords\" A list of strings, where each string represents a feature that should be ignored during matching. This is useful, for example, when you want to ignore common function words. \"freq_basis\" Either \"texts\" or \"corpus\" . If set to \"texts\" , scoring will compute frequency of a given token based on the text in which it is found; if set to \"corpus\" , frequency of a given token will be computed from all texts available in the Tesserae database of the same language as the text in which the token is found. For more explanation, refer to Reference Frequences . \"max_distance\" A positive integer marking the maximum distance separating matching tokens within a span. In other words, d_s + d_t (from the equation in Compute Score ) must be less than the maximum distance specified in order for a given source and target span to count as a parallel. Setting this to some large value (like 999 whn comparing lines of poetry) effectively makes this parameter unrestrictive. \"distance_basis\" A string describing which matching tokens will be used to calculate distance. For more details, see Distance Basis .","title":"Method Parameterization"},{"location":"details/methods/#features","text":"As noted earlier, the original Tesserae algorithm considers two spans to match when they share at least two tokens of the specified (linguistic) feature. The following table describes what values are available for use with the \"feature\" key in the JSON object parameterizing the original Tesserae scoring algorithm sent as the request data payload at the /parallels/ endpoint: Feature Description \"lemma\" Match by dictionary headword. \"semantic\" TODO: Figure out what semantic means. \"sound\" Match by phonetic trigrams. \"word\" Match by exact word.","title":"Features"},{"location":"details/methods/#distance-basis","text":"As noted earlier, the distance between tokens is important to how the score for a pair is calculated. The following table describes the options for determining this distance: Distance Basis Description \"span\" The two farthest apart matching tokens within the span are used; d_t>0 and d_s>0 in this case. \"span-target\" The two farthest apart matching tokens in the target span only are used; d_t>0 and d_s=0 in this case. \"span-source\" The two farthest apart matching tokens in the source span only are used; d_t=0 and d_s>0 in this case. \"frequency\" The two lowest frequency tokens within the span are used. d_t>0 and d_s>0 in this case. \"frequency-target\" The two lowest frequency tokens within the target span only are used; d_t>0 and d_s=0 in this case. \"frequency-source\" The two lowest frequency tokens within the source span only are used; d_t=0 and d_s>0 in this case. Forstall, Christopher, Neil Coffee, Thomas Buck, Katherine Roache, and Sarah Jacobson. \u201cModeling the Scholars: Detecting Intertextuality through Enhanced Word-level N-gram Matching.\u201d Digital Scholarship in the Humanities 30, no. 4 (2014): 503-515. See Figure 1. \u21a9","title":"Distance Basis"},{"location":"details/stopwords-lists/","text":"Stopwords Lists \u00b6 This page displays the pre-curated stopwords lists available via the list_name URL query field at the /stopwords/ endpoint. TODO: add Latin function words, Greek function words, etc.","title":"Stopwords Lists"},{"location":"details/stopwords-lists/#stopwords-lists","text":"This page displays the pre-curated stopwords lists available via the list_name URL query field at the /stopwords/ endpoint. TODO: add Latin function words, Greek function words, etc.","title":"Stopwords Lists"},{"location":"details/subreferencing/","text":"Subreferencing \u00b6 This page attempts to explain the excruciatingly detailed nuances of subreferencing in CTS URNs. TODO: Should we fill this out for real, or should we point them to the right resources and have them figure it out on their own?","title":"Subreferencing"},{"location":"details/subreferencing/#subreferencing","text":"This page attempts to explain the excruciatingly detailed nuances of subreferencing in CTS URNs. TODO: Should we fill this out for real, or should we point them to the right resources and have them figure it out on their own?","title":"Subreferencing"},{"location":"details/units/","text":"Units \u00b6 This page details the concept of textual units and describes JSON objects permitted in the \"source\" and \"target\" keys of the JSON data payload required by the /parallels/ endpoint. Summary by Example \u00b6 Assuming that 5c6c69f042facf59122418f8 is the identifier for the Aeneid , the following JSON specifies all of the Aeneid by split by lines: { \"object_id\": \"5c6c69f042facf59122418f8\", \"units\": \"line\" } Assuming that 5c6c69f042facf59122418f8 is the identifier for the Aeneid , the following JSON specifies all of the Aeneid by split by phrases: { \"object_id\": \"5c6c69f042facf59122418f8\", \"units\": \"phrase\" } Introduction \u00b6 Because Tesserae\u2019s algorithm works by comparing spans of text, it is necessary to break up a full text into spans of text. The Tesserae algorithm then compares each span of text labeled as part of the source text with each span of text labeled as part of the target text. We call these spans of text \u201cunits\u201d. JSON Object \u00b6 The JSON object specifying which units to extract from what work has the following keys: Key Value \"object_id\" A string identifying the text of interest. \"units\" A string representing the unit of interest. Accepted values are described below in Permitted Units Permitted Units \u00b6 Lines \u00b6 One way to divide the text is by line. In the case of poetry, lines are inherent to the structure of the text. In the case of prose, lines are arbitrarily enforced by the referencing conventions used by scholars of the prose work. To specify division of a text by line, set the \"units\" key to the \"line\" value. Phrases \u00b6 Another way to divide the text is by phrase. Phrases in a text are delimited by ending punctuation provided by the editors of the edition of the text. To specify division of a text by phrase, set the \"units\" key to the \"phrase\" value.","title":"Units"},{"location":"details/units/#units","text":"This page details the concept of textual units and describes JSON objects permitted in the \"source\" and \"target\" keys of the JSON data payload required by the /parallels/ endpoint.","title":"Units"},{"location":"details/units/#summary-by-example","text":"Assuming that 5c6c69f042facf59122418f8 is the identifier for the Aeneid , the following JSON specifies all of the Aeneid by split by lines: { \"object_id\": \"5c6c69f042facf59122418f8\", \"units\": \"line\" } Assuming that 5c6c69f042facf59122418f8 is the identifier for the Aeneid , the following JSON specifies all of the Aeneid by split by phrases: { \"object_id\": \"5c6c69f042facf59122418f8\", \"units\": \"phrase\" }","title":"Summary by Example"},{"location":"details/units/#introduction","text":"Because Tesserae\u2019s algorithm works by comparing spans of text, it is necessary to break up a full text into spans of text. The Tesserae algorithm then compares each span of text labeled as part of the source text with each span of text labeled as part of the target text. We call these spans of text \u201cunits\u201d.","title":"Introduction"},{"location":"details/units/#json-object","text":"The JSON object specifying which units to extract from what work has the following keys: Key Value \"object_id\" A string identifying the text of interest. \"units\" A string representing the unit of interest. Accepted values are described below in Permitted Units","title":"JSON Object"},{"location":"details/units/#permitted-units","text":"","title":"Permitted Units"},{"location":"details/units/#lines","text":"One way to divide the text is by line. In the case of poetry, lines are inherent to the structure of the text. In the case of prose, lines are arbitrarily enforced by the referencing conventions used by scholars of the prose work. To specify division of a text by line, set the \"units\" key to the \"line\" value.","title":"Lines"},{"location":"details/units/#phrases","text":"Another way to divide the text is by phrase. Phrases in a text are delimited by ending punctuation provided by the editors of the edition of the text. To specify division of a text by phrase, set the \"units\" key to the \"phrase\" value.","title":"Phrases"},{"location":"endpoints/featuresets/","text":"/featuresets/ \u00b6 The /featuresets/ endpoint interacts with Tesserae\u2019s database of feature sets, which are bundles of features computed from tokens found in the literary works Tesserae has processed. Thus, a feature set includes such features as the exact word form and the possible lemmata of a given token. (Given that a token is an instance of a given word, the exact word form matches the word which a token is an instance of.) GET \u00b6 Requesting GET at /features/ provides information on features stored in Tesserae\u2019s database. Request \u00b6 The following fields may be used in a URL query to filter the response: Field Name Field Value form Only database information for the features corresponding with the specified exact word form is returned. lemma Only database information for features corresponding with the specified lemma is returned. NB: Remember to percent encode field values when necessary. Response \u00b6 On success, the response includes a JSON data payload consisting of a JSON object with the key \"featuresets\" , associated with an array of JSON objects. The JSON objects in the array, in turn, contain the following keys: Key Value \"form\" A string matching the exact word form. \"lemmata\" A list of strings, where each string is a possible lemma for this word. \"language\" A string indicating what language this word belongs to. Examples \u00b6 Search by One Field \u00b6 curl -i -X GET \"https://tesserae.caset.buffalo.edu/featuresets/?form=leges\" Response: HTTP/1.1 200 OK ... { \"featuresets\": [ { \"form\": \"leges\", \"lemmata\": [\"lego\", \"lex\"], \"language\": \"latin\" } ] } Search for Word Not Present in Database \u00b6 curl -i -X GET \"https://tesserae.caset.buffalo.edu/featuresets/?lemma=xlwbnd\" Response: HTTP/1.1 200 OK ... { \"featuresets\": [] }","title":"/featuresets/"},{"location":"endpoints/featuresets/#featuresets","text":"The /featuresets/ endpoint interacts with Tesserae\u2019s database of feature sets, which are bundles of features computed from tokens found in the literary works Tesserae has processed. Thus, a feature set includes such features as the exact word form and the possible lemmata of a given token. (Given that a token is an instance of a given word, the exact word form matches the word which a token is an instance of.)","title":"/featuresets/"},{"location":"endpoints/featuresets/#get","text":"Requesting GET at /features/ provides information on features stored in Tesserae\u2019s database.","title":"GET"},{"location":"endpoints/featuresets/#request","text":"The following fields may be used in a URL query to filter the response: Field Name Field Value form Only database information for the features corresponding with the specified exact word form is returned. lemma Only database information for features corresponding with the specified lemma is returned. NB: Remember to percent encode field values when necessary.","title":"Request"},{"location":"endpoints/featuresets/#response","text":"On success, the response includes a JSON data payload consisting of a JSON object with the key \"featuresets\" , associated with an array of JSON objects. The JSON objects in the array, in turn, contain the following keys: Key Value \"form\" A string matching the exact word form. \"lemmata\" A list of strings, where each string is a possible lemma for this word. \"language\" A string indicating what language this word belongs to.","title":"Response"},{"location":"endpoints/featuresets/#examples","text":"","title":"Examples"},{"location":"endpoints/featuresets/#search-by-one-field","text":"curl -i -X GET \"https://tesserae.caset.buffalo.edu/featuresets/?form=leges\" Response: HTTP/1.1 200 OK ... { \"featuresets\": [ { \"form\": \"leges\", \"lemmata\": [\"lego\", \"lex\"], \"language\": \"latin\" } ] }","title":"Search by One Field"},{"location":"endpoints/featuresets/#search-for-word-not-present-in-database","text":"curl -i -X GET \"https://tesserae.caset.buffalo.edu/featuresets/?lemma=xlwbnd\" Response: HTTP/1.1 200 OK ... { \"featuresets\": [] }","title":"Search for Word Not Present in Database"},{"location":"endpoints/parallels-uuid/","text":"/parallels/<uuid>/ \u00b6 The /parallels/<uuid>/ endpoint serves the results from a Tesserae intertext discovery result. Note that <uuid> is a placeholder for an identifying string. NB: This endpoint is meant to be used for retrieving the results from a Tesserae search and not as a permanent link to a previously completed search. GET \u00b6 Requesting GET at /parallels/<uuid>/ retrieves the Tesserae search results associated with <uuid> . This association was made at the time that the intertext query was submitted with a POST at /parallels/ . Request \u00b6 There are no special points to note about requesting Tesserae search results. Response \u00b6 On success, the data payload contains a JSON object with the following keys: Key Value \"data\" The JSON object received as request data payload. \"parallels\" A list of JSON objects describing parallels found. A JSON object in the \"parallels\" list of the successful response data payload contains the following keys: Key Value \"source\" A string representing the CTS URN for the text span used as the source in this parallel. \"target\" A string representing the CTS URN for the text span used as the target in this parallel. \"match_tokens\" A list of strings, where each string is a token found in both the source span and the target span. \"score\" A number representing the score assigned to the pair of text spans. \"source_raw\" The string making up the text span specified by the value of \"source\" . \"target_raw\" The string making up the text span specified by the value of \"target\" . \"highlight\" A list of strings representing CTS URNs that define which parts in the source and target spans were used to determine the score. NB: A successful response body will be compressed with gzip. On failure, the response is a 404 error. Examples \u00b6 Retrieving Search Results \u00b6 Assume that the identifier id1 is associated with a certain search result. Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/parallels/id1\" Response: HTTP/1.1 200 OK ... Content-Encoding: gzip ... ... Attempting to Retrieve Search Results that Do Not Exist \u00b6 Assume that the identifier i-expired is not associated with any search results in cache. Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/parallels/i-expired\" Response: HTTP/1.1 404 Not Found ...","title":"/parallels/&ltuuid&gt/"},{"location":"endpoints/parallels-uuid/#parallelsuuid","text":"The /parallels/<uuid>/ endpoint serves the results from a Tesserae intertext discovery result. Note that <uuid> is a placeholder for an identifying string. NB: This endpoint is meant to be used for retrieving the results from a Tesserae search and not as a permanent link to a previously completed search.","title":"/parallels/&lt;uuid&gt;/"},{"location":"endpoints/parallels-uuid/#get","text":"Requesting GET at /parallels/<uuid>/ retrieves the Tesserae search results associated with <uuid> . This association was made at the time that the intertext query was submitted with a POST at /parallels/ .","title":"GET"},{"location":"endpoints/parallels-uuid/#request","text":"There are no special points to note about requesting Tesserae search results.","title":"Request"},{"location":"endpoints/parallels-uuid/#response","text":"On success, the data payload contains a JSON object with the following keys: Key Value \"data\" The JSON object received as request data payload. \"parallels\" A list of JSON objects describing parallels found. A JSON object in the \"parallels\" list of the successful response data payload contains the following keys: Key Value \"source\" A string representing the CTS URN for the text span used as the source in this parallel. \"target\" A string representing the CTS URN for the text span used as the target in this parallel. \"match_tokens\" A list of strings, where each string is a token found in both the source span and the target span. \"score\" A number representing the score assigned to the pair of text spans. \"source_raw\" The string making up the text span specified by the value of \"source\" . \"target_raw\" The string making up the text span specified by the value of \"target\" . \"highlight\" A list of strings representing CTS URNs that define which parts in the source and target spans were used to determine the score. NB: A successful response body will be compressed with gzip. On failure, the response is a 404 error.","title":"Response"},{"location":"endpoints/parallels-uuid/#examples","text":"","title":"Examples"},{"location":"endpoints/parallels-uuid/#retrieving-search-results","text":"Assume that the identifier id1 is associated with a certain search result. Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/parallels/id1\" Response: HTTP/1.1 200 OK ... Content-Encoding: gzip ... ...","title":"Retrieving Search Results"},{"location":"endpoints/parallels-uuid/#attempting-to-retrieve-search-results-that-do-not-exist","text":"Assume that the identifier i-expired is not associated with any search results in cache. Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/parallels/i-expired\" Response: HTTP/1.1 404 Not Found ...","title":"Attempting to Retrieve Search Results that Do Not Exist"},{"location":"endpoints/parallels/","text":"/parallels/ \u00b6 The /parallels/ endpoint interacts with Tesserae\u2019s intertext discovery capabilities. POST \u00b6 Requesting POST at /parallels/ submits a query for discovering intertexts between the texts available in Tesserae\u2019s database. The query parameters should be sent as a JSON data payload. Request \u00b6 The JSON data payload representing query parameters must contain the following keys. TODO: On the live server, should we limit the amount of source and target texts allowed to be queried? Key Value \"source\" A JSON object describing source units. Further details are available at Units . These units will be compared with the units described by \"target\" to find intertexts. \"target\" A JSON object describing target units. Further details are available at Units . These units will be compared with the units described by \"source\" to find intertexts. \"method\" A JSON object describing the scoring method used to evaluate the intertextual strength of a source text and target text pair. More information on specifying the scoring method can be found in Scoring Methods . NB: Compressing this request body with gzip is recommended. (The Content-Encoding header will be required for compressing the request body.) JSON Object Describing Source and Target Units \u00b6 Response \u00b6 On success, one of two responses will be returned. The first is a 201 (created); the second is a 303 (see other). In either case, a Location header will specify the URL where the search results can be retrieved. Note that the URL specified in the Location header will conform to the /parallels/<uuid>/ endpoint. The distinction between the two successful responses is a matter of whether the search results remain cached in the database. If the search results are not in cache at the time of the request, a 201 response is given, and the results, once the search is complete, are cached. If the search results are in cache at the time of the request, a 303 response is given and a URL identical to the one served when put into cache is served. For more details, see Cached Results . On failure, the data payload contains error information in a JSON object with the following keys: Key Value \"data\" The JSON object received as request data payload. \"message\" A string explaining why the request data payload was rejected. Examples \u00b6 Submit a Tesserae Search \u00b6 Request: curl -i -X POST \"https://tesserae.caset.buffalo.edu/parallels/\" -d '{ \\ \"source\": { \\ \"object_id\": \"5c6c69f042facf59122418f8\", \\ \"units\": \"line\" \\ }, \\ \"target\": { \\ \"object_id\": \"5c6c69f042facf59122418f6\", \\ \"units\": \"line\" \\ }, \\ \"method\": { \\ \"name\": \"original\", \\ \"feature\": \"lemma\", \\ \"stopwords\": [ \\ \"qui\", \"quis\", \"sum\", \"et\", \"in\", \\ \"is\", \"non\", \"hic\", \"ego\", \"ut\" ], \\ \"freq_basis\": \"corpus\", \\ \"max_distance\": 10, \\ \"distance_basis\": \"frequency\" \\ } \\ }' Response: HTTP/1.1 201 Created ... Content-Location: /parallels/some-uuid-for-results/ ...","title":"/parallels/"},{"location":"endpoints/parallels/#parallels","text":"The /parallels/ endpoint interacts with Tesserae\u2019s intertext discovery capabilities.","title":"/parallels/"},{"location":"endpoints/parallels/#post","text":"Requesting POST at /parallels/ submits a query for discovering intertexts between the texts available in Tesserae\u2019s database. The query parameters should be sent as a JSON data payload.","title":"POST"},{"location":"endpoints/parallels/#request","text":"The JSON data payload representing query parameters must contain the following keys. TODO: On the live server, should we limit the amount of source and target texts allowed to be queried? Key Value \"source\" A JSON object describing source units. Further details are available at Units . These units will be compared with the units described by \"target\" to find intertexts. \"target\" A JSON object describing target units. Further details are available at Units . These units will be compared with the units described by \"source\" to find intertexts. \"method\" A JSON object describing the scoring method used to evaluate the intertextual strength of a source text and target text pair. More information on specifying the scoring method can be found in Scoring Methods . NB: Compressing this request body with gzip is recommended. (The Content-Encoding header will be required for compressing the request body.)","title":"Request"},{"location":"endpoints/parallels/#json-object-describing-source-and-target-units","text":"","title":"JSON Object Describing Source and Target Units"},{"location":"endpoints/parallels/#response","text":"On success, one of two responses will be returned. The first is a 201 (created); the second is a 303 (see other). In either case, a Location header will specify the URL where the search results can be retrieved. Note that the URL specified in the Location header will conform to the /parallels/<uuid>/ endpoint. The distinction between the two successful responses is a matter of whether the search results remain cached in the database. If the search results are not in cache at the time of the request, a 201 response is given, and the results, once the search is complete, are cached. If the search results are in cache at the time of the request, a 303 response is given and a URL identical to the one served when put into cache is served. For more details, see Cached Results . On failure, the data payload contains error information in a JSON object with the following keys: Key Value \"data\" The JSON object received as request data payload. \"message\" A string explaining why the request data payload was rejected.","title":"Response"},{"location":"endpoints/parallels/#examples","text":"","title":"Examples"},{"location":"endpoints/parallels/#submit-a-tesserae-search","text":"Request: curl -i -X POST \"https://tesserae.caset.buffalo.edu/parallels/\" -d '{ \\ \"source\": { \\ \"object_id\": \"5c6c69f042facf59122418f8\", \\ \"units\": \"line\" \\ }, \\ \"target\": { \\ \"object_id\": \"5c6c69f042facf59122418f6\", \\ \"units\": \"line\" \\ }, \\ \"method\": { \\ \"name\": \"original\", \\ \"feature\": \"lemma\", \\ \"stopwords\": [ \\ \"qui\", \"quis\", \"sum\", \"et\", \"in\", \\ \"is\", \"non\", \"hic\", \"ego\", \"ut\" ], \\ \"freq_basis\": \"corpus\", \\ \"max_distance\": 10, \\ \"distance_basis\": \"frequency\" \\ } \\ }' Response: HTTP/1.1 201 Created ... Content-Location: /parallels/some-uuid-for-results/ ...","title":"Submit a Tesserae Search"},{"location":"endpoints/stopwords-lists-name/","text":"/stopwords/lists/<name>/ \u00b6 The /stopwords/lists/<name>/ endpoint serves a specific curated stopwords list. Note that <name> is a placeholder for the name of a curated stopwords list. GET \u00b6 Requesting GET at /stopwords/lists/<name>/ provides the curated stopwords list specified by <name> . Request \u00b6 Again, <name> is a placeholder for the name of the desired curated stopwords list. Names recognized by the server can be discovered at /stopwords/lists/ . Response \u00b6 On success, the response includes a JSON data payload consisting of a JSON object with the key \"stopwords\" associated with an array of strings. On failure, the data payload contains error information in a JSON object with the following keys: Key Value \"name\" A string matching the requested stopwords list name. \"message\" A string explaining why the request was rejected. Examples \u00b6 Query for Curated Stopwords List Already in Database \u00b6 Suppose that latin-lemma-10 is the name of one of the stopwords lists in the database. Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/stopwords/lists/latin-lemma-10/\" Response: HTTP/1.1 200 OK ... { \"stopwords\": [ ... \"et\", ... ] } Query for Curated Stopwords List Not in Database \u00b6 Suppose that i-dont-exist does not match any stopwords list names in the database. Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/stopwords/lists/i-dont-exist/\" Response: HTTP/1.1 404 Not Found ... { \"name\": \"i-dont-exist\", \"message\": \"No stopwords list names match the specified name (i-dont-exist).\" } DELETE \u00b6 NB: The DELETE method for /stopwords/lists/<name> is available only on the administrative server Requesting DELETE at /stopwords/lists/<name> will eliminate <name> and its associated stopwords list from Tesserae\u2019s database. Request \u00b6 No request data payload is expected. Response \u00b6 On success, there is no response data payload. On failure, the response data payload contains error information in a JSON object with the following keys: Key Value \"name\" A string matching <name> after percent decoding. \"message\" A string explaining why the request data payload was rejected. Examples \u00b6 Delete a Stopwords List Already in the Database \u00b6 Assume that a stopwords list named already-exists already exists in the database. Request: curl -i -X DELETE \"https://tesserae.caset.buffalo.edu/texts/already-exists\" Response: HTTP/1.1 204 No Content ... Attempt to Delete a Stopwords List Not in the Database \u00b6 Assume that there is no stopwords list named \u201ci-dont-exist\u201d in the database. Request: curl -i -X DELETE \"https://tesserae.caset.buffalo.edu/texts/i-dont-exist\" Response: HTTP/1.1 404 Not Found ... { \"name\": \"i-dont-exist\", \"message\": \"No stopwords list names match the specified name (i-dont-exist).\" }","title":"/stopwords/lists/&lt;name&gt;/"},{"location":"endpoints/stopwords-lists-name/#stopwordslistsname","text":"The /stopwords/lists/<name>/ endpoint serves a specific curated stopwords list. Note that <name> is a placeholder for the name of a curated stopwords list.","title":"/stopwords/lists/&lt;name&gt;/"},{"location":"endpoints/stopwords-lists-name/#get","text":"Requesting GET at /stopwords/lists/<name>/ provides the curated stopwords list specified by <name> .","title":"GET"},{"location":"endpoints/stopwords-lists-name/#request","text":"Again, <name> is a placeholder for the name of the desired curated stopwords list. Names recognized by the server can be discovered at /stopwords/lists/ .","title":"Request"},{"location":"endpoints/stopwords-lists-name/#response","text":"On success, the response includes a JSON data payload consisting of a JSON object with the key \"stopwords\" associated with an array of strings. On failure, the data payload contains error information in a JSON object with the following keys: Key Value \"name\" A string matching the requested stopwords list name. \"message\" A string explaining why the request was rejected.","title":"Response"},{"location":"endpoints/stopwords-lists-name/#examples","text":"","title":"Examples"},{"location":"endpoints/stopwords-lists-name/#query-for-curated-stopwords-list-already-in-database","text":"Suppose that latin-lemma-10 is the name of one of the stopwords lists in the database. Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/stopwords/lists/latin-lemma-10/\" Response: HTTP/1.1 200 OK ... { \"stopwords\": [ ... \"et\", ... ] }","title":"Query for Curated Stopwords List Already in Database"},{"location":"endpoints/stopwords-lists-name/#query-for-curated-stopwords-list-not-in-database","text":"Suppose that i-dont-exist does not match any stopwords list names in the database. Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/stopwords/lists/i-dont-exist/\" Response: HTTP/1.1 404 Not Found ... { \"name\": \"i-dont-exist\", \"message\": \"No stopwords list names match the specified name (i-dont-exist).\" }","title":"Query for Curated Stopwords List Not in Database"},{"location":"endpoints/stopwords-lists-name/#delete","text":"NB: The DELETE method for /stopwords/lists/<name> is available only on the administrative server Requesting DELETE at /stopwords/lists/<name> will eliminate <name> and its associated stopwords list from Tesserae\u2019s database.","title":"DELETE"},{"location":"endpoints/stopwords-lists-name/#request_1","text":"No request data payload is expected.","title":"Request"},{"location":"endpoints/stopwords-lists-name/#response_1","text":"On success, there is no response data payload. On failure, the response data payload contains error information in a JSON object with the following keys: Key Value \"name\" A string matching <name> after percent decoding. \"message\" A string explaining why the request data payload was rejected.","title":"Response"},{"location":"endpoints/stopwords-lists-name/#examples_1","text":"","title":"Examples"},{"location":"endpoints/stopwords-lists-name/#delete-a-stopwords-list-already-in-the-database","text":"Assume that a stopwords list named already-exists already exists in the database. Request: curl -i -X DELETE \"https://tesserae.caset.buffalo.edu/texts/already-exists\" Response: HTTP/1.1 204 No Content ...","title":"Delete a Stopwords List Already in the Database"},{"location":"endpoints/stopwords-lists-name/#attempt-to-delete-a-stopwords-list-not-in-the-database","text":"Assume that there is no stopwords list named \u201ci-dont-exist\u201d in the database. Request: curl -i -X DELETE \"https://tesserae.caset.buffalo.edu/texts/i-dont-exist\" Response: HTTP/1.1 404 Not Found ... { \"name\": \"i-dont-exist\", \"message\": \"No stopwords list names match the specified name (i-dont-exist).\" }","title":"Attempt to Delete a Stopwords List Not in the Database"},{"location":"endpoints/stopwords-lists/","text":"/stopwords/lists/ \u00b6 the /stopwords/lists endpoint serves the names of the curated stopwords lists. Use /stopwords/lists/<name>/ to obtain one of these curated stopwords lists. GET \u00b6 Requesting GET at /stopwords/lists/ provides a list of strings, where each entry is the name of one of the curated stopwords lists. Request \u00b6 There are no special points to note about requesting the curated stopwords list names. Response \u00b6 On success, the response includes a JSON data payload consisting of a JSON object with the key \"list_names\" , associated with an array of strings. Each string in this array is the name of a curated stopwords list available on the Tesserae database. Examples \u00b6 Discover Curated Stopwords List Names \u00b6 Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/stopwords/lists/\" Response: HTTP/1.1 200 OK ... { \"list_names\": [ \"latin-lemma-10\", ... ] } POST \u00b6 NB: The POST method for /stopwords/lists/ is available only on the administrative server Requesting POST at /stopwords/lists/ with an appropriate JSON data payload will add a stopwords list and an associated name to Tesserae\u2019s database. Request \u00b6 Appropriate JSON data for a POST at /stopwords/lists/ must be a JSON object containing the following keys: Key Value \"name\" A string representing the name of the stopwords lists. \"stopwords\" An array of strings, where each string is a stopword. If the value given to \"name\" is already used in Tesserae\u2019s database for a stopwords list, the request will fail. Consider a DELETE at /stopwords/lists/<name>/ followed by a POST at /stopwords/lists/ if you wish to change the list associated with a given list name. Response \u00b6 On success, the response data payload contains the key \"stopwords\" associated with an array of strings. Additionally, the Content-Location header will specify the URL associated with this newly created stopwords list. On failure, the data payload contains error information in a JSON object with the following keys: Key Value \"data\" The JSON object received as request data payload. \"message\" A string explaining why the request data payload was rejected. Examples \u00b6 Create a New Stopwords List \u00b6 Request: curl -i -X POST \"https://tesserae.caset.buffalo.edu/stopwords/lists/\" -d '{ \\ \"name\": \"new-list\", \\ \"stopwords\": [ \\ \"a\", \\ \"b\" \\ ] \\ }' Response: HTTP/1.1 201 Created ... Content-Location: /stopwords/lists/new-list/ ... { \"stopwords\": [ \"a\", \"b\" ] } Attempt to Create a New Stopwords List with a Name Already in the Database \u00b6 Suppose that latin-lemma-10 is the name of one of the stopwords lists. Request: curl -i -X POST \"https://tesserae.caset.buffalo.edu/stopwords/lists/\" -d '{ \\ \"name\": \"latin-lemma-10\", \\ \"stopwords\": [ \\ \"a\", \\ \"b\" \\ ] \\ }' Response: HTTP/1.1 400 Bad Request ... { \"data\": { \"name\": \"latin-lemma-10\", \"stopwords\": [ \"a\", \"b\" ] } \"message\": \"The stopwords list name provided (latin-lemma-10) already exists in the database. If you meant to update the stopwords list, try a DELETE at https://tesserae.caset.buffalo.edu/texts/latin-lemma-10/ first, then re-try this POST.\" } Attempt to Create a New Stopwords List with Insufficient Information \u00b6 Request: curl -i -X POST \"https://tesserae.caset.buffalo.edu/stopwords/lists/\" -d '{ \\ \"stopwords\": [ \\ \"a\", \\ \"b\" \\ ] \\ }' Response: HTTP/1.1 400 Bad Request ... { \"data\": { \"stopwords\": [ \"a\", \"b\" ] } \"message\": \"No name provided.\" }","title":"/stopwords/lists/"},{"location":"endpoints/stopwords-lists/#stopwordslists","text":"the /stopwords/lists endpoint serves the names of the curated stopwords lists. Use /stopwords/lists/<name>/ to obtain one of these curated stopwords lists.","title":"/stopwords/lists/"},{"location":"endpoints/stopwords-lists/#get","text":"Requesting GET at /stopwords/lists/ provides a list of strings, where each entry is the name of one of the curated stopwords lists.","title":"GET"},{"location":"endpoints/stopwords-lists/#request","text":"There are no special points to note about requesting the curated stopwords list names.","title":"Request"},{"location":"endpoints/stopwords-lists/#response","text":"On success, the response includes a JSON data payload consisting of a JSON object with the key \"list_names\" , associated with an array of strings. Each string in this array is the name of a curated stopwords list available on the Tesserae database.","title":"Response"},{"location":"endpoints/stopwords-lists/#examples","text":"","title":"Examples"},{"location":"endpoints/stopwords-lists/#discover-curated-stopwords-list-names","text":"Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/stopwords/lists/\" Response: HTTP/1.1 200 OK ... { \"list_names\": [ \"latin-lemma-10\", ... ] }","title":"Discover Curated Stopwords List Names"},{"location":"endpoints/stopwords-lists/#post","text":"NB: The POST method for /stopwords/lists/ is available only on the administrative server Requesting POST at /stopwords/lists/ with an appropriate JSON data payload will add a stopwords list and an associated name to Tesserae\u2019s database.","title":"POST"},{"location":"endpoints/stopwords-lists/#request_1","text":"Appropriate JSON data for a POST at /stopwords/lists/ must be a JSON object containing the following keys: Key Value \"name\" A string representing the name of the stopwords lists. \"stopwords\" An array of strings, where each string is a stopword. If the value given to \"name\" is already used in Tesserae\u2019s database for a stopwords list, the request will fail. Consider a DELETE at /stopwords/lists/<name>/ followed by a POST at /stopwords/lists/ if you wish to change the list associated with a given list name.","title":"Request"},{"location":"endpoints/stopwords-lists/#response_1","text":"On success, the response data payload contains the key \"stopwords\" associated with an array of strings. Additionally, the Content-Location header will specify the URL associated with this newly created stopwords list. On failure, the data payload contains error information in a JSON object with the following keys: Key Value \"data\" The JSON object received as request data payload. \"message\" A string explaining why the request data payload was rejected.","title":"Response"},{"location":"endpoints/stopwords-lists/#examples_1","text":"","title":"Examples"},{"location":"endpoints/stopwords-lists/#create-a-new-stopwords-list","text":"Request: curl -i -X POST \"https://tesserae.caset.buffalo.edu/stopwords/lists/\" -d '{ \\ \"name\": \"new-list\", \\ \"stopwords\": [ \\ \"a\", \\ \"b\" \\ ] \\ }' Response: HTTP/1.1 201 Created ... Content-Location: /stopwords/lists/new-list/ ... { \"stopwords\": [ \"a\", \"b\" ] }","title":"Create a New Stopwords List"},{"location":"endpoints/stopwords-lists/#attempt-to-create-a-new-stopwords-list-with-a-name-already-in-the-database","text":"Suppose that latin-lemma-10 is the name of one of the stopwords lists. Request: curl -i -X POST \"https://tesserae.caset.buffalo.edu/stopwords/lists/\" -d '{ \\ \"name\": \"latin-lemma-10\", \\ \"stopwords\": [ \\ \"a\", \\ \"b\" \\ ] \\ }' Response: HTTP/1.1 400 Bad Request ... { \"data\": { \"name\": \"latin-lemma-10\", \"stopwords\": [ \"a\", \"b\" ] } \"message\": \"The stopwords list name provided (latin-lemma-10) already exists in the database. If you meant to update the stopwords list, try a DELETE at https://tesserae.caset.buffalo.edu/texts/latin-lemma-10/ first, then re-try this POST.\" }","title":"Attempt to Create a New Stopwords List with a Name Already in the Database"},{"location":"endpoints/stopwords-lists/#attempt-to-create-a-new-stopwords-list-with-insufficient-information","text":"Request: curl -i -X POST \"https://tesserae.caset.buffalo.edu/stopwords/lists/\" -d '{ \\ \"stopwords\": [ \\ \"a\", \\ \"b\" \\ ] \\ }' Response: HTTP/1.1 400 Bad Request ... { \"data\": { \"stopwords\": [ \"a\", \"b\" ] } \"message\": \"No name provided.\" }","title":"Attempt to Create a New Stopwords List with Insufficient Information"},{"location":"endpoints/stopwords/","text":"/stopwords/ \u00b6 The /stopwords/ endpoint serves stopwords lists. These lists can be useful when parameterizing the scoring algorithm at the /parallels/ endpoint. Stopwords lists are typically computed using frequency information. The reasoning is that the most frequent features are typically the least informative (consider, for example, the articles in English). GET \u00b6 Requesting GET at /stopwords/ provides a stopwords list. How this stopwords list was created is dependent on the URL query fields used. By default, a GET at /stopwords/ returns an empty list. Request \u00b6 The following fields may be used in a URL query to specify the parameters by which the stopwords list is created: Field Name Field Value feature A string specifying the linguistic feature by which frequencies are calculated; lemma is the default. list_size An integer specifying the number of stopwords to include in the stopwords list. 10 is the default. works A percent-encoded string of the form <object_id 1>,<object_id 2>,... , specifying which works are used to determine feature frequencies. Alternatively, a string matching one of the languages in the Tesserae database will compute feature frequencies from the corpus of works in that language. Response \u00b6 On success, the response data payload will contain a JSON object with the key \"stopwords\" , associated with a list of strings. On failure, the data payload contains error information in a JSON object with the following keys: Key Value \"data\" A JSON object whose keys are the received URL query fields, associated with percent-decoded values. \"message\" A string explaining why the request data payload was rejected. Examples \u00b6 Get the 10 Highest Frequency Lemmata in Latin \u00b6 Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/stopwords/?works=latin\" Response: HTTP/1.1 200 OK ... { \"stopwords\": [ ... ] } Get the 20 Highest Frequency Lemmata in Latin \u00b6 Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/stopwords/?works=latin&list_size=20\" Response: HTTP/1.1 200 OK ... { \"stopwords\": [ ... ] } Get the 15 Highest Frequency Lemmata in Two Specific Texts \u00b6 Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/stopwords/?works=5c6c69f042facf59122418f6%2C5c6c69f042facf59122418f8&list_size=15\" Response: HTTP/1.1 200 OK ... { \"stopwords\": [ ... ] } Attempt to Get a Stopwords List with a Text Not in the Database \u00b6 Suppose no text has the identifier DEADBEEFDEADBEEFDEADBEEF . Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/stopwords/?works=DEADBEEFDEADBEEFDEADBEEF&list_size=15\" Response: HTTP/1.1 400 Bad Request ... { \"data\": { \"works\": [\"DEADBEEFDEADBEEFDEADBEEF\"], \"list_size\": 15 }, \"message\": \"No text can be found with the identifier provided (DEADBEEFDEADBEEFDEADBEEF).\" }","title":"/stopwords/"},{"location":"endpoints/stopwords/#stopwords","text":"The /stopwords/ endpoint serves stopwords lists. These lists can be useful when parameterizing the scoring algorithm at the /parallels/ endpoint. Stopwords lists are typically computed using frequency information. The reasoning is that the most frequent features are typically the least informative (consider, for example, the articles in English).","title":"/stopwords/"},{"location":"endpoints/stopwords/#get","text":"Requesting GET at /stopwords/ provides a stopwords list. How this stopwords list was created is dependent on the URL query fields used. By default, a GET at /stopwords/ returns an empty list.","title":"GET"},{"location":"endpoints/stopwords/#request","text":"The following fields may be used in a URL query to specify the parameters by which the stopwords list is created: Field Name Field Value feature A string specifying the linguistic feature by which frequencies are calculated; lemma is the default. list_size An integer specifying the number of stopwords to include in the stopwords list. 10 is the default. works A percent-encoded string of the form <object_id 1>,<object_id 2>,... , specifying which works are used to determine feature frequencies. Alternatively, a string matching one of the languages in the Tesserae database will compute feature frequencies from the corpus of works in that language.","title":"Request"},{"location":"endpoints/stopwords/#response","text":"On success, the response data payload will contain a JSON object with the key \"stopwords\" , associated with a list of strings. On failure, the data payload contains error information in a JSON object with the following keys: Key Value \"data\" A JSON object whose keys are the received URL query fields, associated with percent-decoded values. \"message\" A string explaining why the request data payload was rejected.","title":"Response"},{"location":"endpoints/stopwords/#examples","text":"","title":"Examples"},{"location":"endpoints/stopwords/#get-the-10-highest-frequency-lemmata-in-latin","text":"Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/stopwords/?works=latin\" Response: HTTP/1.1 200 OK ... { \"stopwords\": [ ... ] }","title":"Get the 10 Highest Frequency Lemmata in Latin"},{"location":"endpoints/stopwords/#get-the-20-highest-frequency-lemmata-in-latin","text":"Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/stopwords/?works=latin&list_size=20\" Response: HTTP/1.1 200 OK ... { \"stopwords\": [ ... ] }","title":"Get the 20 Highest Frequency Lemmata in Latin"},{"location":"endpoints/stopwords/#get-the-15-highest-frequency-lemmata-in-two-specific-texts","text":"Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/stopwords/?works=5c6c69f042facf59122418f6%2C5c6c69f042facf59122418f8&list_size=15\" Response: HTTP/1.1 200 OK ... { \"stopwords\": [ ... ] }","title":"Get the 15 Highest Frequency Lemmata in Two Specific Texts"},{"location":"endpoints/stopwords/#attempt-to-get-a-stopwords-list-with-a-text-not-in-the-database","text":"Suppose no text has the identifier DEADBEEFDEADBEEFDEADBEEF . Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/stopwords/?works=DEADBEEFDEADBEEFDEADBEEF&list_size=15\" Response: HTTP/1.1 400 Bad Request ... { \"data\": { \"works\": [\"DEADBEEFDEADBEEFDEADBEEF\"], \"list_size\": 15 }, \"message\": \"No text can be found with the identifier provided (DEADBEEFDEADBEEFDEADBEEF).\" }","title":"Attempt to Get a Stopwords List with a Text Not in the Database"},{"location":"endpoints/texts-objid-units/","text":"/texts/<cts_urn>/units/ \u00b6 The /texts/<cts_urn>/units/ endpoint provides CTS URNs for units and subreferences within a specific text. This endpoint may be useful, for example, when determining what CTS URNs to list in \"source\" for a search query submission at /parallels/ . Note that <cts_urn> is a placeholder to be replaced by a percent encoded CTS URN refering to a specific text. (Modern web browsers tend to percent encode URLs by default, but if you are using a different method to query the API, you will have to percent encode the CTS URN yourself. A variety of resources online can help you do this; query for \u201cpercent encode\u201d in your favorite search engine to find them.) Throughout the rest of this page, <cts_urn> will continue to serve as a placeholder for a percent encoded CTS URN. GET \u00b6 Requesting GET at /texts/<cts_urn>/units/ provides lists of CTS URNs identifying partitions of the work specified by <cts_urn> . Note that by default, a GET request at /texts/<cts_urn>/units/ will return an empty JSON object in the response data payload. The desired lists must be specified by URL query fields. Request \u00b6 To obtain lists of CTS URNs, the desired lists must be specified by URL query fields. If one of the following fields is specified in the URL, a corresponding list of CTS URNs will be returned: Field Name Field Value lines The list of returned CTS URNs partition the text by lines (if the text is poetry) or by paragraphs (if the text is prose). phrases The list of returned CTS URNs partition the text by phrases; a phrase is separated from a neighboring phrase by punctuation. Response \u00b6 On success, the response includes a JSON data payload consisting of a JSON object which may contain any of the following keys: Key Value \"lines\" An array of strings representing CTS URNs that partition the text into lines (if the text is poetry) or paragraphs (if the work is prose). \"phrases\" An array of strings representing CTS URNs that partition the text into phrases. The specified key appears in the response data payload only when there was a corresponding URL query field in the request. On failure, the data payload contains error information in a JSON object with the following keys: Key Value \"cts_urn\" A string corresponding to the CTS URN decoded from the URL. \"units\" A list of strings corresponding to the URL queries received. \"message\" A string explaining why the request data payload was rejected. Examples \u00b6 Query without Any Filters \u00b6 Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/texts/urn%3Acts%3AlatinLit%3Aphi0917.phi001/units/\" Response: HTTP/1.1 200 OK ... {} Query for CTS URNs Specifying the Lines of the Text \u00b6 Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/texts/urn%3Acts%3AlatinLit%3Aphi0917.phi001/units/?lines=true\" Response: HTTP/1.1 200 OK ... { \"lines\": [ \"urn:cts:latinLit:phi0917.phi001:1.1\", \"urn:cts:latinLit:phi0917.phi001:1.2\", ... ] } Query for Both Line and Phrase CTS URNs \u00b6 Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/texts/urn%3Acts%3AlatinLit%3Aphi0917.phi001/units/?lines=true&phrases=true\" Response: HTTP/1.1 200 OK ... { \"lines\": [ \"urn:cts:latinLit:phi0917.phi001:1.1\", \"urn:cts:latinLit:phi0917.phi001:1.2\", ... ], \"phrases\": [ \"urn:cts:latinLit:phi0917.phi001:1.1-1.8\", \"urn:cts:latinLit:phi0917.phi001:1.9\", ... ] } Query for Text Not in the Database \u00b6 Assume that no entry in the database has the CTS URN \u201cDEADBEEF\u201d. Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/texts/DEADBEEF/units/?lines=true&phrases=true\" Response: HTTP/1.1 404 Not Found ... { \"cts_urn\": \"DEADBEEF\", \"units\": [\"lines\", \"phrases\"], \"message\": \"No text with the specified CTS URN (DEADBEEF) could be found in the database.\" } Query for Unknown Unit Type \u00b6 Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/texts/urn%3Acts%3AlatinLit%3Aphi0917.phi001/units/?lines=true&chunks=true\" Response: HTTP/1.1 400 Bad Request ... { \"cts_urn\": \"urn:cts:latinLit:phi0917.phi001\", \"units\": [\"lines\", \"chunks\"], \"message\": \"The following unit type(s) could not be found for the specified CTS URN (urn:cts:latinLit:phi0917.phi001): chunks.\" }","title":"`/texts/<cts_urn>/units/`"},{"location":"endpoints/texts-objid-units/#textscts_urnunits","text":"The /texts/<cts_urn>/units/ endpoint provides CTS URNs for units and subreferences within a specific text. This endpoint may be useful, for example, when determining what CTS URNs to list in \"source\" for a search query submission at /parallels/ . Note that <cts_urn> is a placeholder to be replaced by a percent encoded CTS URN refering to a specific text. (Modern web browsers tend to percent encode URLs by default, but if you are using a different method to query the API, you will have to percent encode the CTS URN yourself. A variety of resources online can help you do this; query for \u201cpercent encode\u201d in your favorite search engine to find them.) Throughout the rest of this page, <cts_urn> will continue to serve as a placeholder for a percent encoded CTS URN.","title":"/texts/&lt;cts_urn&gt;/units/"},{"location":"endpoints/texts-objid-units/#get","text":"Requesting GET at /texts/<cts_urn>/units/ provides lists of CTS URNs identifying partitions of the work specified by <cts_urn> . Note that by default, a GET request at /texts/<cts_urn>/units/ will return an empty JSON object in the response data payload. The desired lists must be specified by URL query fields.","title":"GET"},{"location":"endpoints/texts-objid-units/#request","text":"To obtain lists of CTS URNs, the desired lists must be specified by URL query fields. If one of the following fields is specified in the URL, a corresponding list of CTS URNs will be returned: Field Name Field Value lines The list of returned CTS URNs partition the text by lines (if the text is poetry) or by paragraphs (if the text is prose). phrases The list of returned CTS URNs partition the text by phrases; a phrase is separated from a neighboring phrase by punctuation.","title":"Request"},{"location":"endpoints/texts-objid-units/#response","text":"On success, the response includes a JSON data payload consisting of a JSON object which may contain any of the following keys: Key Value \"lines\" An array of strings representing CTS URNs that partition the text into lines (if the text is poetry) or paragraphs (if the work is prose). \"phrases\" An array of strings representing CTS URNs that partition the text into phrases. The specified key appears in the response data payload only when there was a corresponding URL query field in the request. On failure, the data payload contains error information in a JSON object with the following keys: Key Value \"cts_urn\" A string corresponding to the CTS URN decoded from the URL. \"units\" A list of strings corresponding to the URL queries received. \"message\" A string explaining why the request data payload was rejected.","title":"Response"},{"location":"endpoints/texts-objid-units/#examples","text":"","title":"Examples"},{"location":"endpoints/texts-objid-units/#query-without-any-filters","text":"Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/texts/urn%3Acts%3AlatinLit%3Aphi0917.phi001/units/\" Response: HTTP/1.1 200 OK ... {}","title":"Query without Any Filters"},{"location":"endpoints/texts-objid-units/#query-for-cts-urns-specifying-the-lines-of-the-text","text":"Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/texts/urn%3Acts%3AlatinLit%3Aphi0917.phi001/units/?lines=true\" Response: HTTP/1.1 200 OK ... { \"lines\": [ \"urn:cts:latinLit:phi0917.phi001:1.1\", \"urn:cts:latinLit:phi0917.phi001:1.2\", ... ] }","title":"Query for CTS URNs Specifying the Lines of the Text"},{"location":"endpoints/texts-objid-units/#query-for-both-line-and-phrase-cts-urns","text":"Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/texts/urn%3Acts%3AlatinLit%3Aphi0917.phi001/units/?lines=true&phrases=true\" Response: HTTP/1.1 200 OK ... { \"lines\": [ \"urn:cts:latinLit:phi0917.phi001:1.1\", \"urn:cts:latinLit:phi0917.phi001:1.2\", ... ], \"phrases\": [ \"urn:cts:latinLit:phi0917.phi001:1.1-1.8\", \"urn:cts:latinLit:phi0917.phi001:1.9\", ... ] }","title":"Query for Both Line and Phrase CTS URNs"},{"location":"endpoints/texts-objid-units/#query-for-text-not-in-the-database","text":"Assume that no entry in the database has the CTS URN \u201cDEADBEEF\u201d. Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/texts/DEADBEEF/units/?lines=true&phrases=true\" Response: HTTP/1.1 404 Not Found ... { \"cts_urn\": \"DEADBEEF\", \"units\": [\"lines\", \"phrases\"], \"message\": \"No text with the specified CTS URN (DEADBEEF) could be found in the database.\" }","title":"Query for Text Not in the Database"},{"location":"endpoints/texts-objid-units/#query-for-unknown-unit-type","text":"Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/texts/urn%3Acts%3AlatinLit%3Aphi0917.phi001/units/?lines=true&chunks=true\" Response: HTTP/1.1 400 Bad Request ... { \"cts_urn\": \"urn:cts:latinLit:phi0917.phi001\", \"units\": [\"lines\", \"chunks\"], \"message\": \"The following unit type(s) could not be found for the specified CTS URN (urn:cts:latinLit:phi0917.phi001): chunks.\" }","title":"Query for Unknown Unit Type"},{"location":"endpoints/texts-objid/","text":"/texts/<object_id>/ \u00b6 The /texts/<object_id>/ endpoint interacts with a specific literary work in Tesserae\u2019s database. Note that <object_id> is a placeholder to be replaced by an identifier refering to a specific text. Throughout the rest of this page, <object_id> will continue to serve as a placeholder for a text\u2019s identifier. GET \u00b6 Requesting GET at /texts/<object_id>/ provides information on the literary work specified by <object_id> . Request \u00b6 Note that an <object_id> used for one text on the Tesserae website may be different from the <object_id> used to refer to the same text on a different instance of Tesserae (such as one locally installed on your computer). Response \u00b6 On success, the response includes a data payload consisting of a JSON object with the following keys: Key Value \"author\" A string identifying the text\u2019s author. \"object_id\" A string which uniquely identifies the text on the instance of Tesserae you queried. \"extras\" A JSON object specified by the user. \"is_prose\" A boolean value denoting whether the text is considered a prose work. \"language\" A string identifying the composition language of the text. \"title\" A string identifying the text\u2019s name. \"year\" An integer representing the text\u2019s publication year; a negative integer corresponds to the BC era. On failure, the data payload contains error information in a JSON object with the following keys: Key Value \"object_id\" A string corresponding to <object_id> . \"message\" A string explaining why the request data payload was rejected. Examples \u00b6 Retrieve a Text\u2019s Database Entry \u00b6 Suppose that 5c6c69f042facf59122418f6 is the identifier associated with Lucan\u2019s Bellum Civile . Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/texts/5c6c69f042facf59122418f6/\" Response: HTTP/1.1 200 OK ... { \"author\": \"Lucan\", \"object_id\": \"5c6c69f042facf59122418f6\", \"extras\": {}, \"is_prose\": false, \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\", \"language\": \"latin\", \"title\": \"Bellum Civile\", \"year\": 65 } Attempt to Retrieve a Database Entry with a Malformed object_id \u00b6 Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/texts/badid/\" Response: HTTP/1.1 400 Bad Request ... { \"object_id\": \"badid\", \"message\": \"Provided identifier (badid) is malformed.\" } Attempt to Retrieve the Database Entry for a Text Not in the Database \u00b6 Assume that no text in the database has the identifier \u201cDEADBEEFDEADBEEFDEADBEEF\u201d. Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/texts/DEADBEEFDEADBEEFDEADBEEF/\" Response: HTTP/1.1 404 Not Found ... { \"object_id\": \"DEADBEEF\", \"message\": \"No text with the provided identifier (DEADBEEFDEADBEEFDEADBEEF) was found in the database.\" } PATCH \u00b6 NB: The PATCH method for /texts/<object_id>/ is available only on the administrative server Requesting PATCH at /texts/<object_id>/ with an appropriate JSON data payload will update the database entry of the text with an identifier of <object_id> . The update will be in accordance with the JSON data. Request \u00b6 Appropriate JSON data for a PATCH at /texts/<object_id>/ is any JSON object without the following keys: \"object_id\" , \"id\" , \"_id\" . The keys in this object specify which attributes of the text entry in Tesserae\u2019s database will be updated (or added, if the key does not correspond with any of the text entry\u2019s attributes). The new values of these attributes are specified by the values of the keys corresponding to those attributes. NB: You cannot update a text\u2019s identifier. Response \u00b6 On success, the data payload contains the text entry in Tesserae\u2019s database after the update has been made. On failure, the data payload contains error information in a JSON object with the following keys: Key Value \"object_id\" A string matching <object_id> . \"data\" The JSON object received as request data payload. \"message\" A string explaining why the request data payload was rejected. Examples \u00b6 Update the Value of a Pre-existing Attribute of a Text\u2019s Database Entry \u00b6 Assume that the following entry exists in the database: { \"author\": \"Lucan\", \"object_id\": \"5c6c69f042facf59122418f6\", \"extras\": {}, \"is_prose\": false, \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\", \"language\": \"latin\", \"title\": \"Bellum Civile\", \"year\": 65 } Request: curl -i -X PATCH \"https://tesserae.caset.buffalo.edu/texts/5c6c69f042facf59122418f6/\" -d '{ \\ \"title\": \"Pharsalia\" \\ }' Response: HTTP/1.1 200 OK ... { \"author\": \"Lucan\", \"object_id\": \"5c6c69f042facf59122418f6\", \"extras\": {}, \"is_prose\": false, \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\", \"language\": \"latin\", \"title\": \"Pharsalia\", \"year\": 65 } Add New User-Specified Information to a Text\u2019s Database Entry \u00b6 Assume that the following entry exists in the database: { \"author\": \"Lucan\", \"object_id\": \"5c6c69f042facf59122418f6\", \"extras\": {}, \"is_prose\": false, \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\", \"language\": \"latin\", \"title\": \"Bellum Civile\", \"year\": 65 } Request: curl -i -X PATCH \"https://tesserae.caset.buffalo.edu/texts/5c6c69f042facf59122418f6/\" -d '{ \\ \"extras\": {\"alternate_title\": \"Pharsalia\"} \\ }' Response: HTTP/1.1 200 OK ... { \"author\": \"Lucan\", \"object_id\": \"5c6c69f042facf59122418f6\", \"extras\": { \"alternate_title\": \"Pharsalia\" }, \"is_prose\": false, \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\", \"language\": \"latin\", \"title\": \"Bellum Civile\", \"year\": 65 } Attempt to Update a Database Entry with a Malformed object_id \u00b6 Request: curl -i -X PATCH \"https://tesserae.caset.buffalo.edu/texts/badid/\" -d '{ \\ \"fail\": \"this example will\" \\ }' Response: HTTP/1.1 400 Bad Request ... { \"object_id\": \"badid\", \"data\": { \"fail\": \"this example will\" }, \"message\": \"Provided identifier (badid) is malformed.\" } Attempt to Update the Database Entry for a Text Not in the Database \u00b6 Assume that no text in the database has the identifier \u201cDEADBEEFDEADBEEFDEADBEEF\u201d. Request: curl -i -X PATCH \"https://tesserae.caset.buffalo.edu/texts/DEADBEEFDEADBEEFDEADBEEF/\" -d '{ \\ \"fail\": \"this example will\" \\ }' Response: HTTP/1.1 404 Not Found ... { \"object_id\": \"DEADBEEFDEADBEEFDEADBEEF\", \"data\": { \"fail\": \"this example will\" }, \"message\": \"No text with the provided identifier (DEADBEEFDEADBEEFDEADBEEF) was found in the database.\" } DELETE \u00b6 NB: The DELETE method for /texts/<object_id>/ is available only on the administrative server Requesting DELETE at /texts/<object_id>/ will delete the text identified by <object_id> from Tesserae\u2019s database. Request \u00b6 There is no request data payload. Response \u00b6 On success, there is no response data payload. On failure, the data payload contains error information in a JSON object with the following keys: Key Value \"object_id\" A string matching <object_id> . \"message\" A string explaining why the request data payload was rejected. Examples \u00b6 Delete a Text \u00b6 Assume that the following entry exists in the database: { \"author\": \"Lucan\", \"object_id\": \"5c6c69f042facf59122418f6\", \"extras\": {}, \"is_prose\": false, \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\", \"language\": \"latin\", \"title\": \"Bellum Civile\", \"year\": 65 } Request: curl -i -X DELETE \"https://tesserae.caset.buffalo.edu/texts/5c6c69f042facf59122418f6/\"' Response: HTTP/1.1 204 No Content ... Attempt to Delete a Database Entry with a Malformed object_id \u00b6 Request: curl -i -X DELETE \"https://tesserae.caset.buffalo.edu/texts/badid/\" Response: HTTP/1.1 400 Bad Request ... { \"object_id\": \"badid\" \"message\": \"Provided identifier (badid) is malformed.\" } Attempt to Delete a Database Entry for a Text Not in the Database \u00b6 Assume that no text in the database has the identifier \u201cDEADBEEFDEADBEEFDEADBEEF\u201d. Request: curl -i -X DELETE \"https://tesserae.caset.buffalo.edu/texts/DEADBEEFDEADBEEFDEADBEEF/\" Response: HTTP/1.1 404 Not Found ... { \"object_id\": \"DEADBEEFDEADBEEFDEADBEEF\" \"message\": \"No text with the provided identifier (DEADBEEFDEADBEEFDEADBEEF) was found in the database.\" }","title":"/texts/&lt;object_id&gt;/"},{"location":"endpoints/texts-objid/#textsobject_id","text":"The /texts/<object_id>/ endpoint interacts with a specific literary work in Tesserae\u2019s database. Note that <object_id> is a placeholder to be replaced by an identifier refering to a specific text. Throughout the rest of this page, <object_id> will continue to serve as a placeholder for a text\u2019s identifier.","title":"/texts/&lt;object_id&gt;/"},{"location":"endpoints/texts-objid/#get","text":"Requesting GET at /texts/<object_id>/ provides information on the literary work specified by <object_id> .","title":"GET"},{"location":"endpoints/texts-objid/#request","text":"Note that an <object_id> used for one text on the Tesserae website may be different from the <object_id> used to refer to the same text on a different instance of Tesserae (such as one locally installed on your computer).","title":"Request"},{"location":"endpoints/texts-objid/#response","text":"On success, the response includes a data payload consisting of a JSON object with the following keys: Key Value \"author\" A string identifying the text\u2019s author. \"object_id\" A string which uniquely identifies the text on the instance of Tesserae you queried. \"extras\" A JSON object specified by the user. \"is_prose\" A boolean value denoting whether the text is considered a prose work. \"language\" A string identifying the composition language of the text. \"title\" A string identifying the text\u2019s name. \"year\" An integer representing the text\u2019s publication year; a negative integer corresponds to the BC era. On failure, the data payload contains error information in a JSON object with the following keys: Key Value \"object_id\" A string corresponding to <object_id> . \"message\" A string explaining why the request data payload was rejected.","title":"Response"},{"location":"endpoints/texts-objid/#examples","text":"","title":"Examples"},{"location":"endpoints/texts-objid/#retrieve-a-texts-database-entry","text":"Suppose that 5c6c69f042facf59122418f6 is the identifier associated with Lucan\u2019s Bellum Civile . Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/texts/5c6c69f042facf59122418f6/\" Response: HTTP/1.1 200 OK ... { \"author\": \"Lucan\", \"object_id\": \"5c6c69f042facf59122418f6\", \"extras\": {}, \"is_prose\": false, \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\", \"language\": \"latin\", \"title\": \"Bellum Civile\", \"year\": 65 }","title":"Retrieve a Text's Database Entry"},{"location":"endpoints/texts-objid/#attempt-to-retrieve-a-database-entry-with-a-malformed-object_id","text":"Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/texts/badid/\" Response: HTTP/1.1 400 Bad Request ... { \"object_id\": \"badid\", \"message\": \"Provided identifier (badid) is malformed.\" }","title":"Attempt to Retrieve a Database Entry with a Malformed object_id"},{"location":"endpoints/texts-objid/#attempt-to-retrieve-the-database-entry-for-a-text-not-in-the-database","text":"Assume that no text in the database has the identifier \u201cDEADBEEFDEADBEEFDEADBEEF\u201d. Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/texts/DEADBEEFDEADBEEFDEADBEEF/\" Response: HTTP/1.1 404 Not Found ... { \"object_id\": \"DEADBEEF\", \"message\": \"No text with the provided identifier (DEADBEEFDEADBEEFDEADBEEF) was found in the database.\" }","title":"Attempt to Retrieve the Database Entry for a Text Not in the Database"},{"location":"endpoints/texts-objid/#patch","text":"NB: The PATCH method for /texts/<object_id>/ is available only on the administrative server Requesting PATCH at /texts/<object_id>/ with an appropriate JSON data payload will update the database entry of the text with an identifier of <object_id> . The update will be in accordance with the JSON data.","title":"PATCH"},{"location":"endpoints/texts-objid/#request_1","text":"Appropriate JSON data for a PATCH at /texts/<object_id>/ is any JSON object without the following keys: \"object_id\" , \"id\" , \"_id\" . The keys in this object specify which attributes of the text entry in Tesserae\u2019s database will be updated (or added, if the key does not correspond with any of the text entry\u2019s attributes). The new values of these attributes are specified by the values of the keys corresponding to those attributes. NB: You cannot update a text\u2019s identifier.","title":"Request"},{"location":"endpoints/texts-objid/#response_1","text":"On success, the data payload contains the text entry in Tesserae\u2019s database after the update has been made. On failure, the data payload contains error information in a JSON object with the following keys: Key Value \"object_id\" A string matching <object_id> . \"data\" The JSON object received as request data payload. \"message\" A string explaining why the request data payload was rejected.","title":"Response"},{"location":"endpoints/texts-objid/#examples_1","text":"","title":"Examples"},{"location":"endpoints/texts-objid/#update-the-value-of-a-pre-existing-attribute-of-a-texts-database-entry","text":"Assume that the following entry exists in the database: { \"author\": \"Lucan\", \"object_id\": \"5c6c69f042facf59122418f6\", \"extras\": {}, \"is_prose\": false, \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\", \"language\": \"latin\", \"title\": \"Bellum Civile\", \"year\": 65 } Request: curl -i -X PATCH \"https://tesserae.caset.buffalo.edu/texts/5c6c69f042facf59122418f6/\" -d '{ \\ \"title\": \"Pharsalia\" \\ }' Response: HTTP/1.1 200 OK ... { \"author\": \"Lucan\", \"object_id\": \"5c6c69f042facf59122418f6\", \"extras\": {}, \"is_prose\": false, \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\", \"language\": \"latin\", \"title\": \"Pharsalia\", \"year\": 65 }","title":"Update the Value of a Pre-existing Attribute of a Text's Database Entry"},{"location":"endpoints/texts-objid/#add-new-user-specified-information-to-a-texts-database-entry","text":"Assume that the following entry exists in the database: { \"author\": \"Lucan\", \"object_id\": \"5c6c69f042facf59122418f6\", \"extras\": {}, \"is_prose\": false, \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\", \"language\": \"latin\", \"title\": \"Bellum Civile\", \"year\": 65 } Request: curl -i -X PATCH \"https://tesserae.caset.buffalo.edu/texts/5c6c69f042facf59122418f6/\" -d '{ \\ \"extras\": {\"alternate_title\": \"Pharsalia\"} \\ }' Response: HTTP/1.1 200 OK ... { \"author\": \"Lucan\", \"object_id\": \"5c6c69f042facf59122418f6\", \"extras\": { \"alternate_title\": \"Pharsalia\" }, \"is_prose\": false, \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\", \"language\": \"latin\", \"title\": \"Bellum Civile\", \"year\": 65 }","title":"Add New User-Specified Information to a Text's Database Entry"},{"location":"endpoints/texts-objid/#attempt-to-update-a-database-entry-with-a-malformed-object_id","text":"Request: curl -i -X PATCH \"https://tesserae.caset.buffalo.edu/texts/badid/\" -d '{ \\ \"fail\": \"this example will\" \\ }' Response: HTTP/1.1 400 Bad Request ... { \"object_id\": \"badid\", \"data\": { \"fail\": \"this example will\" }, \"message\": \"Provided identifier (badid) is malformed.\" }","title":"Attempt to Update a Database Entry with a Malformed object_id"},{"location":"endpoints/texts-objid/#attempt-to-update-the-database-entry-for-a-text-not-in-the-database","text":"Assume that no text in the database has the identifier \u201cDEADBEEFDEADBEEFDEADBEEF\u201d. Request: curl -i -X PATCH \"https://tesserae.caset.buffalo.edu/texts/DEADBEEFDEADBEEFDEADBEEF/\" -d '{ \\ \"fail\": \"this example will\" \\ }' Response: HTTP/1.1 404 Not Found ... { \"object_id\": \"DEADBEEFDEADBEEFDEADBEEF\", \"data\": { \"fail\": \"this example will\" }, \"message\": \"No text with the provided identifier (DEADBEEFDEADBEEFDEADBEEF) was found in the database.\" }","title":"Attempt to Update the Database Entry for a Text Not in the Database"},{"location":"endpoints/texts-objid/#delete","text":"NB: The DELETE method for /texts/<object_id>/ is available only on the administrative server Requesting DELETE at /texts/<object_id>/ will delete the text identified by <object_id> from Tesserae\u2019s database.","title":"DELETE"},{"location":"endpoints/texts-objid/#request_2","text":"There is no request data payload.","title":"Request"},{"location":"endpoints/texts-objid/#response_2","text":"On success, there is no response data payload. On failure, the data payload contains error information in a JSON object with the following keys: Key Value \"object_id\" A string matching <object_id> . \"message\" A string explaining why the request data payload was rejected.","title":"Response"},{"location":"endpoints/texts-objid/#examples_2","text":"","title":"Examples"},{"location":"endpoints/texts-objid/#delete-a-text","text":"Assume that the following entry exists in the database: { \"author\": \"Lucan\", \"object_id\": \"5c6c69f042facf59122418f6\", \"extras\": {}, \"is_prose\": false, \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\", \"language\": \"latin\", \"title\": \"Bellum Civile\", \"year\": 65 } Request: curl -i -X DELETE \"https://tesserae.caset.buffalo.edu/texts/5c6c69f042facf59122418f6/\"' Response: HTTP/1.1 204 No Content ...","title":"Delete a Text"},{"location":"endpoints/texts-objid/#attempt-to-delete-a-database-entry-with-a-malformed-object_id","text":"Request: curl -i -X DELETE \"https://tesserae.caset.buffalo.edu/texts/badid/\" Response: HTTP/1.1 400 Bad Request ... { \"object_id\": \"badid\" \"message\": \"Provided identifier (badid) is malformed.\" }","title":"Attempt to Delete a Database Entry with a Malformed object_id"},{"location":"endpoints/texts-objid/#attempt-to-delete-a-database-entry-for-a-text-not-in-the-database","text":"Assume that no text in the database has the identifier \u201cDEADBEEFDEADBEEFDEADBEEF\u201d. Request: curl -i -X DELETE \"https://tesserae.caset.buffalo.edu/texts/DEADBEEFDEADBEEFDEADBEEF/\" Response: HTTP/1.1 404 Not Found ... { \"object_id\": \"DEADBEEFDEADBEEFDEADBEEF\" \"message\": \"No text with the provided identifier (DEADBEEFDEADBEEFDEADBEEF) was found in the database.\" }","title":"Attempt to Delete a Database Entry for a Text Not in the Database"},{"location":"endpoints/texts/","text":"/texts/ \u00b6 The /texts/ endpoint interacts with Tesserae\u2019s database of literary works. GET \u00b6 Requesting GET at /texts/ provides information on literary works stored in Tesserae\u2019s database. Request \u00b6 The following fields may be used in a URL query to filter the response: Field Name Field Value author Only database information for texts with the specified author is returned. after Only database information for texts written/published after the specified year is returned; use negative integers for B.C. dates. before Only database information for texts written/published before the specified year is returned; use negative integers for B.C. dates. is_prose If set to \u201ctrue\u201d, only database for information for texts considered prose works is returned. language Only database information for texts with the specified language is returned. title Only database information for texts with the specified title is returned. Response \u00b6 On success, the response includes a JSON data payload consisting of a JSON object with the key \"texts\" , associated with an array of JSON objects. The JSON objects in the array, in turn, contain the following keys: Key Value \"author\" A string identifying the text\u2019s author. \"object_id\" A string which uniquely identifies the text in the Tesserae database. \"is_prose\" A boolean value denoting whether the text is considered a prose work. \"language\" A string identifying the composition language of the text. \"title\" A string identifying the text\u2019s name. \"year\" An integer representing the text\u2019s publication year; a negative integer corresponds to the BC era. Examples \u00b6 Search by One Field \u00b6 Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/texts/?author=Vergil\" Response: HTTP/1.1 200 OK ... { \"texts\": [ { \"author\": \"Vergil\", ... }, ... ] } Search by Multiple Fields \u00b6 Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/texts/?after=100&language=latin\" Response: HTTP/1.1 200 OK ... { \"texts\": [ { ... \"language\": \"latin\", ... \"year\": 101 }, ... ] } Search with No Results \u00b6 Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/texts/?language=Klingon\" Response: HTTP/1.1 200 OK ... { \"texts\": [] } POST \u00b6 NB: The POST method for /texts/ is available only on the administrative server Requesting POST at /texts/ with an appropriate JSON data payload will add the text described by the JSON data to Tesserae\u2019s database. Request \u00b6 Appropriate JSON data for a POST at /texts/ must be a JSON object containing the following keys: Key Value \"author\" A string identifying the text\u2019s author. \"is_prose\" A boolean value denoting whether the text is a prose work. \"language\" A string identifying the composition language of the text. \"path\" A string identifying the location of the text\u2019s contents. \"title\" A string identifying the text\u2019s name. \"year\" An integer representing the text\u2019s publication year; a negative integer corresponds to the BC era. The JSON object is forbidden from containing the following keys: \"_id\" , \"id\" , \"object_id\" . Response \u00b6 On success, the response data payload is a JSON object replicating the entry created in Tesserae\u2019s database according to the POST request. Additionally, the Content-Location header will specify the URL associated with this newly created database entry. On failure, the data payload contains error information in a JSON object with the following keys: Key Value \"data\" The JSON object received as request data payload. \"message\" A string explaining why the request data payload was rejected. Examples \u00b6 Upload an Entry for a Text Not in the Database \u00b6 Request: curl -i -X POST \"https://tesserae.caset.buffalo.edu/texts/\" -d '{ \\ \"author\": \"Lucan\", \\ \"is_prose\": false, \\ \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \\ \"language\": \"latin\", \\ \"title\": \"Bellum Civile\", \\ \"year\": 65 \\ }' Response: HTTP/1.1 201 Created ... Content-Location: /texts/5c6c69f042facf59122418f6/ ... { \"author\": \"Lucan\", \"object_id\": \"5c6c69f042facf59122418f6\", \"is_prose\": false, \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \"language\": \"latin\", \"title\": \"Bellum Civile\", \"year\": 65 } Upload an Entry for Text Not in the Database with Insufficient Information \u00b6 Request: curl -i -X POST \"https://tesserae.caset.buffalo.edu/texts/\" -d '{ \\ \"author\": \"Lucan\", \\ \"is_prose\": false, \\ \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \\ \"title\": \"Bellum Civile\", \\ \"year\": 65 \\ }' Response: HTTP/1.1 400 Bad Request ... { \"data\": { \"author\": \"Lucan\", \"is_prose\": false, \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \"title\": \"Bellum Civile\", \"year\": 65 }, \"message\": \"The request data payload is missing the following required key(s): language.\" } Upload an Entry for Text Not in the Database with a Prohibited Key \u00b6 Request: curl -i -X POST \"https://tesserae.caset.buffalo.edu/texts/\" -d '{ \\ \"author\": \"Lucan\", \\ \"object_id\": \"DEADBEEFDEADBEEFDEADBEEF\", \\ \"is_prose\": false, \\ \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \\ \"language\": \"latin\", \\ \"title\": \"Bellum Civile\", \\ \"year\": 65 \\ }' Response: HTTP/1.1 400 Bad Request ... { \"data\": { \"author\": \"Lucan\", \"object_id\": \"DEADBEEFDEADBEEFDEADBEEF\" \"is_prose\": false, \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \"language\": \"latin\", \"title\": \"Bellum Civile\", \"year\": 65 }, \"message\": \"The request data payload contains the following prohibited key(s): object_id.\" }","title":"/texts/"},{"location":"endpoints/texts/#texts","text":"The /texts/ endpoint interacts with Tesserae\u2019s database of literary works.","title":"/texts/"},{"location":"endpoints/texts/#get","text":"Requesting GET at /texts/ provides information on literary works stored in Tesserae\u2019s database.","title":"GET"},{"location":"endpoints/texts/#request","text":"The following fields may be used in a URL query to filter the response: Field Name Field Value author Only database information for texts with the specified author is returned. after Only database information for texts written/published after the specified year is returned; use negative integers for B.C. dates. before Only database information for texts written/published before the specified year is returned; use negative integers for B.C. dates. is_prose If set to \u201ctrue\u201d, only database for information for texts considered prose works is returned. language Only database information for texts with the specified language is returned. title Only database information for texts with the specified title is returned.","title":"Request"},{"location":"endpoints/texts/#response","text":"On success, the response includes a JSON data payload consisting of a JSON object with the key \"texts\" , associated with an array of JSON objects. The JSON objects in the array, in turn, contain the following keys: Key Value \"author\" A string identifying the text\u2019s author. \"object_id\" A string which uniquely identifies the text in the Tesserae database. \"is_prose\" A boolean value denoting whether the text is considered a prose work. \"language\" A string identifying the composition language of the text. \"title\" A string identifying the text\u2019s name. \"year\" An integer representing the text\u2019s publication year; a negative integer corresponds to the BC era.","title":"Response"},{"location":"endpoints/texts/#examples","text":"","title":"Examples"},{"location":"endpoints/texts/#search-by-one-field","text":"Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/texts/?author=Vergil\" Response: HTTP/1.1 200 OK ... { \"texts\": [ { \"author\": \"Vergil\", ... }, ... ] }","title":"Search by One Field"},{"location":"endpoints/texts/#search-by-multiple-fields","text":"Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/texts/?after=100&language=latin\" Response: HTTP/1.1 200 OK ... { \"texts\": [ { ... \"language\": \"latin\", ... \"year\": 101 }, ... ] }","title":"Search by Multiple Fields"},{"location":"endpoints/texts/#search-with-no-results","text":"Request: curl -i -X GET \"https://tesserae.caset.buffalo.edu/texts/?language=Klingon\" Response: HTTP/1.1 200 OK ... { \"texts\": [] }","title":"Search with No Results"},{"location":"endpoints/texts/#post","text":"NB: The POST method for /texts/ is available only on the administrative server Requesting POST at /texts/ with an appropriate JSON data payload will add the text described by the JSON data to Tesserae\u2019s database.","title":"POST"},{"location":"endpoints/texts/#request_1","text":"Appropriate JSON data for a POST at /texts/ must be a JSON object containing the following keys: Key Value \"author\" A string identifying the text\u2019s author. \"is_prose\" A boolean value denoting whether the text is a prose work. \"language\" A string identifying the composition language of the text. \"path\" A string identifying the location of the text\u2019s contents. \"title\" A string identifying the text\u2019s name. \"year\" An integer representing the text\u2019s publication year; a negative integer corresponds to the BC era. The JSON object is forbidden from containing the following keys: \"_id\" , \"id\" , \"object_id\" .","title":"Request"},{"location":"endpoints/texts/#response_1","text":"On success, the response data payload is a JSON object replicating the entry created in Tesserae\u2019s database according to the POST request. Additionally, the Content-Location header will specify the URL associated with this newly created database entry. On failure, the data payload contains error information in a JSON object with the following keys: Key Value \"data\" The JSON object received as request data payload. \"message\" A string explaining why the request data payload was rejected.","title":"Response"},{"location":"endpoints/texts/#examples_1","text":"","title":"Examples"},{"location":"endpoints/texts/#upload-an-entry-for-a-text-not-in-the-database","text":"Request: curl -i -X POST \"https://tesserae.caset.buffalo.edu/texts/\" -d '{ \\ \"author\": \"Lucan\", \\ \"is_prose\": false, \\ \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \\ \"language\": \"latin\", \\ \"title\": \"Bellum Civile\", \\ \"year\": 65 \\ }' Response: HTTP/1.1 201 Created ... Content-Location: /texts/5c6c69f042facf59122418f6/ ... { \"author\": \"Lucan\", \"object_id\": \"5c6c69f042facf59122418f6\", \"is_prose\": false, \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \"language\": \"latin\", \"title\": \"Bellum Civile\", \"year\": 65 }","title":"Upload an Entry for a Text Not in the Database"},{"location":"endpoints/texts/#upload-an-entry-for-text-not-in-the-database-with-insufficient-information","text":"Request: curl -i -X POST \"https://tesserae.caset.buffalo.edu/texts/\" -d '{ \\ \"author\": \"Lucan\", \\ \"is_prose\": false, \\ \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \\ \"title\": \"Bellum Civile\", \\ \"year\": 65 \\ }' Response: HTTP/1.1 400 Bad Request ... { \"data\": { \"author\": \"Lucan\", \"is_prose\": false, \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \"title\": \"Bellum Civile\", \"year\": 65 }, \"message\": \"The request data payload is missing the following required key(s): language.\" }","title":"Upload an Entry for Text Not in the Database with Insufficient Information"},{"location":"endpoints/texts/#upload-an-entry-for-text-not-in-the-database-with-a-prohibited-key","text":"Request: curl -i -X POST \"https://tesserae.caset.buffalo.edu/texts/\" -d '{ \\ \"author\": \"Lucan\", \\ \"object_id\": \"DEADBEEFDEADBEEFDEADBEEF\", \\ \"is_prose\": false, \\ \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \\ \"language\": \"latin\", \\ \"title\": \"Bellum Civile\", \\ \"year\": 65 \\ }' Response: HTTP/1.1 400 Bad Request ... { \"data\": { \"author\": \"Lucan\", \"object_id\": \"DEADBEEFDEADBEEFDEADBEEF\" \"is_prose\": false, \"path\": \"https://raw.githubusercontent.com/tesserae/tesserae/master/texts/la/lucan.bellum_civile.tess\" \"language\": \"latin\", \"title\": \"Bellum Civile\", \"year\": 65 }, \"message\": \"The request data payload contains the following prohibited key(s): object_id.\" }","title":"Upload an Entry for Text Not in the Database with a Prohibited Key"},{"location":"endpoints/tokens/","text":"","title":"Tokens"},{"location":"endpoints/units/","text":"","title":"Units"},{"location":"getting-started/cts-urns/","text":"Canonical Text Services Uniform Resource Names (CTS URNs) \u00b6 This page describes some of the basic concepts of CTS URNs used in Tesserae. Referencing Convention \u00b6 The CTS URN standard is a convention for helping two people reference the same thing in a digital text. For example, suppose you wish to discuss line 10 of book 1 of the digital copy of Homer\u2019s Iliad available on the Perseus website. By providing the appropriate CTS URN, others can follow your discussion by referencing the same digital copy which you referenced when you were forming your points. There are some technical details about what exactly goes into making a CTS URN, but for purposes of using them, it is sufficient to know the following: The various parts of the CTS URN will be separated by a colon ( : ). The first four parts of the CTS URN identify the work. e.g., any CTS URN that begins with urn:cts:greekLit:tlg0012.tlg001 refers to Homer\u2019s Iliad The fifth part, if given, allows for referencing a canonical unit within the work. e.g., the CTS URN urn:cts:greekLit:tlg0012.tlg001:1 refers to book 1 of Homer\u2019s Iliad Further Resources \u00b6 The Homer Multitext Project CTS URN overview, a more thorough primer (with some errors): https://www.homermultitext.org/hmt-doc/cite/cts-urn-overview.html The CTS URN specification, in unadulterated formality: http://cite-architecture.github.io/ctsurn_spec/ Perseus Digital Library + CTS URNs: http://cts.perseids.org/","title":"Canonical Text Services Uniform Resource Names (CTS URNs)"},{"location":"getting-started/cts-urns/#canonical-text-services-uniform-resource-names-cts-urns","text":"This page describes some of the basic concepts of CTS URNs used in Tesserae.","title":"Canonical Text Services Uniform Resource Names (CTS URNs)"},{"location":"getting-started/cts-urns/#referencing-convention","text":"The CTS URN standard is a convention for helping two people reference the same thing in a digital text. For example, suppose you wish to discuss line 10 of book 1 of the digital copy of Homer\u2019s Iliad available on the Perseus website. By providing the appropriate CTS URN, others can follow your discussion by referencing the same digital copy which you referenced when you were forming your points. There are some technical details about what exactly goes into making a CTS URN, but for purposes of using them, it is sufficient to know the following: The various parts of the CTS URN will be separated by a colon ( : ). The first four parts of the CTS URN identify the work. e.g., any CTS URN that begins with urn:cts:greekLit:tlg0012.tlg001 refers to Homer\u2019s Iliad The fifth part, if given, allows for referencing a canonical unit within the work. e.g., the CTS URN urn:cts:greekLit:tlg0012.tlg001:1 refers to book 1 of Homer\u2019s Iliad","title":"Referencing Convention"},{"location":"getting-started/cts-urns/#further-resources","text":"The Homer Multitext Project CTS URN overview, a more thorough primer (with some errors): https://www.homermultitext.org/hmt-doc/cite/cts-urn-overview.html The CTS URN specification, in unadulterated formality: http://cite-architecture.github.io/ctsurn_spec/ Perseus Digital Library + CTS URNs: http://cts.perseids.org/","title":"Further Resources"},{"location":"getting-started/recipes/","text":"Recipes \u00b6 This page describes some common use cases for the API and demonstrates the associated API calls. Running a Tesserae Search \u00b6 TODO: Fill out","title":"Recipes"},{"location":"getting-started/recipes/#recipes","text":"This page describes some common use cases for the API and demonstrates the associated API calls.","title":"Recipes"},{"location":"getting-started/recipes/#running-a-tesserae-search","text":"TODO: Fill out","title":"Running a Tesserae Search"},{"location":"getting-started/tutorial/","text":"Tutorial \u00b6 This page describes some basic concepts of web API\u2019s in general, using examples from Tesserae\u2019s API. The only skill assumed here is the ability to use a web browser. HyperText Transfer Protocol: How the Internet Works \u00b6 TODO: explain HTTP methods Percent Encoding \u00b6 TODO: explain URL encoding Filtering Query Results \u00b6 You can provide URL query strings to filter the results. For example, the HTTP GET request for the resource https://tesserae.caset.buffalo.edu/texts/?author=Vergil asks Tesserae for information on literary works in its database that have \u201cVergil\u201d as an author. Multiple query filters can be applied, as shown in the following example: https://tesserae.caset.buffalo.edu/texts/?author=Vergil&title=Georgics This URL asks Tesserae for information on literary works in its database that have both \u201cVergil\u201d as an author and \u201cGeorgics\u201d as the title. TODO: Fill out rest of tutorial","title":"Tutorial"},{"location":"getting-started/tutorial/#tutorial","text":"This page describes some basic concepts of web API\u2019s in general, using examples from Tesserae\u2019s API. The only skill assumed here is the ability to use a web browser.","title":"Tutorial"},{"location":"getting-started/tutorial/#hypertext-transfer-protocol-how-the-internet-works","text":"TODO: explain HTTP methods","title":"HyperText Transfer Protocol:  How the Internet Works"},{"location":"getting-started/tutorial/#percent-encoding","text":"TODO: explain URL encoding","title":"Percent Encoding"},{"location":"getting-started/tutorial/#filtering-query-results","text":"You can provide URL query strings to filter the results. For example, the HTTP GET request for the resource https://tesserae.caset.buffalo.edu/texts/?author=Vergil asks Tesserae for information on literary works in its database that have \u201cVergil\u201d as an author. Multiple query filters can be applied, as shown in the following example: https://tesserae.caset.buffalo.edu/texts/?author=Vergil&title=Georgics This URL asks Tesserae for information on literary works in its database that have both \u201cVergil\u201d as an author and \u201cGeorgics\u201d as the title. TODO: Fill out rest of tutorial","title":"Filtering Query Results"}]}